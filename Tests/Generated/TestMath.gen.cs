//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.FixedPoint.MathFp;
namespace Unity.Mathematics.FixedPoint.Tests
{
    [TestFixture]
    public partial class TestMath
    {
#if ENABLE_DECIMAL
        [Test]
        public static void abs_Fp()
        {
            TestUtils.AreEqual(abs(0.0m), 0.0m);
            TestUtils.AreEqual(abs(-1.1m), 1.1m);
            TestUtils.AreEqual(abs(2.2m), 2.2m);
        }

        [Test]
        public static void abs_Fp2()
        {
            TestUtils.AreEqual(abs(Fp2(0.0m, -1.1m)), Fp2(0.0m, 1.1m));
            TestUtils.AreEqual(abs(Fp2(2.2m, 2.2m)), Fp2(2.2m, 2.2m));
        }

        [Test]
        public static void abs_Fp3()
        {
            TestUtils.AreEqual(abs(Fp3(0.0m, -1.1m, 2.2m)), Fp3(0.0m, 1.1m, 2.2m));
        }

        [Test]
        public static void abs_Fp4()
        {
            TestUtils.AreEqual(abs(Fp4(0.0m, -1.1m, 2.2m, 2.2m)), Fp4(0.0m, 1.1m, 2.2m, 2.2m));
        }

        [Test]
        public static void sin_Fp()
        {
            TestUtils.AreEqual(sin(-1000000.0m), 0.34999350217129295m, 200000000, false);
            TestUtils.AreEqual(sin(-1.2m), -0.93203908596722635m, 200000000, false);
            TestUtils.AreEqual(sin(0.0m), 0.0m, 200000000, false);
            TestUtils.AreEqual(sin(1.2m), 0.93203908596722635m, 200000000, false);
            TestUtils.AreEqual(sin(1000000.0m), -0.34999350217129295m, 200000000, false);
        }

        [Test]
        public static void sin_Fp2()
        {
            TestUtils.AreEqual(sin(Fp2(-1000000.0m, -1.2m)), Fp2(0.34999350217129295m, -0.93203908596722635m), 200000000, false);
            TestUtils.AreEqual(sin(Fp2(0.0m, 1.2m)), Fp2(0.0m, 0.93203908596722635m), 200000000, false);
            TestUtils.AreEqual(sin(Fp2(1000000.0m, 1000000.0m)), Fp2(-0.34999350217129295m, -0.34999350217129295m), 200000000, false);
        }

        [Test]
        public static void sin_Fp3()
        {
            TestUtils.AreEqual(sin(Fp3(-1000000.0m, -1.2m, 0.0m)), Fp3(0.34999350217129295m, -0.93203908596722635m, 0.0m), 200000000, false);
            TestUtils.AreEqual(sin(Fp3(1.2m, 1000000.0m, 1000000.0m)), Fp3(0.93203908596722635m, -0.34999350217129295m, -0.34999350217129295m), 200000000, false);
        }

        [Test]
        public static void sin_Fp4()
        {
            TestUtils.AreEqual(sin(Fp4(-1000000.0m, -1.2m, 0.0m, 1.2m)), Fp4(0.34999350217129295m, -0.93203908596722635m, 0.0m, 0.93203908596722635m), 200000000, false);
            TestUtils.AreEqual(sin(Fp4(1000000.0m, 1000000.0m, 1000000.0m, 1000000.0m)), Fp4(-0.34999350217129295m, -0.34999350217129295m, -0.34999350217129295m, -0.34999350217129295m), 200000000, false);
        }

        [Test]
        public static void cos_Fp()
        {
            TestUtils.AreEqual(cos(-1000000.0m), 0.93675212753314479m, 200000000, false);
            TestUtils.AreEqual(cos(-1.2m), 0.36235775447667358m, 200000000, false);
            TestUtils.AreEqual(cos(0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(cos(1.2m), 0.36235775447667358m, 200000000, false);
            TestUtils.AreEqual(cos(1000000.0m), 0.93675212753314479m, 200000000, false);
        }

        [Test]
        public static void cos_Fp2()
        {
            TestUtils.AreEqual(cos(Fp2(-1000000.0m, -1.2m)), Fp2(0.93675212753314479m, 0.36235775447667358m), 200000000, false);
            TestUtils.AreEqual(cos(Fp2(0.0m, 1.2m)), Fp2(1.0m, 0.36235775447667358m), 200000000, false);
            TestUtils.AreEqual(cos(Fp2(1000000.0m, 1000000.0m)), Fp2(0.93675212753314479m, 0.93675212753314479m), 200000000, false);
        }

        [Test]
        public static void cos_Fp3()
        {
            TestUtils.AreEqual(cos(Fp3(-1000000.0m, -1.2m, 0.0m)), Fp3(0.93675212753314479m, 0.36235775447667358m, 1.0m), 200000000, false);
            TestUtils.AreEqual(cos(Fp3(1.2m, 1000000.0m, 1000000.0m)), Fp3(0.36235775447667358m, 0.93675212753314479m, 0.93675212753314479m), 200000000, false);
        }

        [Test]
        public static void cos_Fp4()
        {
            TestUtils.AreEqual(cos(Fp4(-1000000.0m, -1.2m, 0.0m, 1.2m)), Fp4(0.93675212753314479m, 0.36235775447667358m, 1.0m, 0.36235775447667358m), 200000000, false);
            TestUtils.AreEqual(cos(Fp4(1000000.0m, 1000000.0m, 1000000.0m, 1000000.0m)), Fp4(0.93675212753314479m, 0.93675212753314479m, 0.93675212753314479m, 0.93675212753314479m), 200000000, false);
        }

        [Test]
        public static void tan_Fp()
        {
            TestUtils.AreEqual(tan(-1000000.0m), 0.373624453987599m, 37200899080192L, false);
            TestUtils.AreEqual(tan(-1.2m), -2.57215162212632m, 37200899080192L, false);
            TestUtils.AreEqual(tan(0.0m), 0.0m, 37200899080192L, false);
            TestUtils.AreEqual(tan(1.2m), 2.57215162212632m, 37200899080192L, false);
            TestUtils.AreEqual(tan(1000000.0m), -0.373624453987599m, 37200899080192L, false);
        }

        [Test]
        public static void tan_Fp2()
        {
            TestUtils.AreEqual(tan(Fp2(-1000000.0m, -1.2m)), Fp2(0.373624453987599m, -2.57215162212632m), 37200899080192L, false);
            TestUtils.AreEqual(tan(Fp2(0.0m, 1.2m)), Fp2(0.0m, 2.57215162212632m), 37200899080192L, false);
            TestUtils.AreEqual(tan(Fp2(1000000.0m, 1000000.0m)), Fp2(-0.373624453987599m, -0.373624453987599m), 37200899080192L, false);
        }

        [Test]
        public static void tan_Fp3()
        {
            TestUtils.AreEqual(tan(Fp3(-1000000.0m, -1.2m, 0.0m)), Fp3(0.373624453987599m, -2.57215162212632m, 0.0m), 37200899080192L, false);
            TestUtils.AreEqual(tan(Fp3(1.2m, 1000000.0m, 1000000.0m)), Fp3(2.57215162212632m, -0.373624453987599m, -0.373624453987599m), 37200899080192L, false);
        }

        [Test]
        public static void tan_Fp4()
        {
            TestUtils.AreEqual(tan(Fp4(-1000000.0m, -1.2m, 0.0m, 1.2m)), Fp4(0.373624453987599m, -2.57215162212632m, 0.0m, 2.57215162212632m), 37200899080192L, false);
            TestUtils.AreEqual(tan(Fp4(1000000.0m, 1000000.0m, 1000000.0m, 1000000.0m)), Fp4(-0.373624453987599m, -0.373624453987599m, -0.373624453987599m, -0.373624453987599m), 37200899080192L, false);
        }

        [Test]
        public static void atan_Fp()
        {
            TestUtils.AreEqual(atan(-1000000.0m), -1.570795326794897m, 37200899080192L, false);
            TestUtils.AreEqual(atan(-1.2m), -0.8760580505981934m, 37200899080192L, false);
            TestUtils.AreEqual(atan(0.0m), 0.0m, 37200899080192L, false);
            TestUtils.AreEqual(atan(1.2m), 0.8760580505981934m, 37200899080192L, false);
            TestUtils.AreEqual(atan(1000000.0m), 1.570795326794897m, 37200899080192L, false);
        }

        [Test]
        public static void atan_Fp2()
        {
            TestUtils.AreEqual(atan(Fp2(-1000000.0m, -1.2m)), Fp2(-1.570795326794897m, -0.8760580505981934m), 37200899080192L, false);
            TestUtils.AreEqual(atan(Fp2(0.0m, 1.2m)), Fp2(0.0m, 0.8760580505981934m), 37200899080192L, false);
            TestUtils.AreEqual(atan(Fp2(1000000.0m, 1000000.0m)), Fp2(1.570795326794897m, 1.570795326794897m), 37200899080192L, false);
        }

        [Test]
        public static void atan_Fp3()
        {
            TestUtils.AreEqual(atan(Fp3(-1000000.0m, -1.2m, 0.0m)), Fp3(-1.570795326794897m, -0.8760580505981934m, 0.0m), 37200899080192L, false);
            TestUtils.AreEqual(atan(Fp3(1.2m, 1000000.0m, 1000000.0m)), Fp3(0.8760580505981934m, 1.570795326794897m, 1.570795326794897m), 37200899080192L, false);
        }

        [Test]
        public static void atan_Fp4()
        {
            TestUtils.AreEqual(atan(Fp4(-1000000.0m, -1.2m, 0.0m, 1.2m)), Fp4(-1.570795326794897m, -0.8760580505981934m, 0.0m, 0.8760580505981934m), 37200899080192L, false);
            TestUtils.AreEqual(atan(Fp4(1000000.0m, 1000000.0m, 1000000.0m, 1000000.0m)), Fp4(1.570795326794897m, 1.570795326794897m, 1.570795326794897m, 1.570795326794897m), 37200899080192L, false);
        }

        [Test]
        public static void atan2_Fp()
        {
            TestUtils.AreEqual(atan2(3.1m, 2.4m), 0.91199029067742038m, 37200899080192L, false);
            TestUtils.AreEqual(atan2(3.1m, -2.4m), 2.2296023629123729m, 37200899080192L, false);
            TestUtils.AreEqual(atan2(-3.1m, 2.4m), -0.91199029067742038m, 37200899080192L, false);
            TestUtils.AreEqual(atan2(-3.1m, -2.4m), -2.2296023629123729m, 37200899080192L, false);
            TestUtils.AreEqual(atan2(0.0m, 0.0m), 0.0m, 37200899080192L, false);
        }

        [Test]
        public static void atan2_Fp2()
        {
            TestUtils.AreEqual(atan2(Fp2(3.1m, 3.1m), Fp2(2.4m, -2.4m)), Fp2(0.91199029067742038m, 2.2296023629123729m), 37200899080192L, false);
            TestUtils.AreEqual(atan2(Fp2(-3.1m, -3.1m), Fp2(2.4m, -2.4m)), Fp2(-0.91199029067742038m, -2.2296023629123729m), 37200899080192L, false);
            TestUtils.AreEqual(atan2(Fp2(0.0m, 0.0m), Fp2(0.0m, 0.0m)), Fp2(0.0m, 0.0m), 37200899080192L, false);
        }

        [Test]
        public static void atan2_Fp3()
        {
            TestUtils.AreEqual(atan2(Fp3(3.1m, 3.1m, -3.1m), Fp3(2.4m, -2.4m, 2.4m)), Fp3(0.91199029067742038m, 2.2296023629123729m, -0.91199029067742038m), 37200899080192L, false);
            TestUtils.AreEqual(atan2(Fp3(-3.1m, 0.0m, 0.0m), Fp3(-2.4m, 0.0m, 0.0m)), Fp3(-2.2296023629123729m, 0.0m, 0.0m), 37200899080192L, false);
        }

        [Test]
        public static void atan2_Fp4()
        {
            TestUtils.AreEqual(atan2(Fp4(3.1m, 3.1m, -3.1m, -3.1m), Fp4(2.4m, -2.4m, 2.4m, -2.4m)), Fp4(0.91199029067742038m, 2.2296023629123729m, -0.91199029067742038m, -2.2296023629123729m), 37200899080192L, false);
            TestUtils.AreEqual(atan2(Fp4(0.0m, 0.0m, 0.0m, 0.0m), Fp4(0.0m, 0.0m, 0.0m, 0.0m)), Fp4(0.0m, 0.0m, 0.0m, 0.0m), 37200899080192L, false);
        }

        [Test]
        public static void log_Fp()
        {
            TestUtils.AreEqual(log(0.0000000012m), -20.5409442801525m, 37200899080192L, false);
            TestUtils.AreEqual(log(1.0m), 0m, 37200899080192L, false);
            TestUtils.AreEqual(log(1200000000m), 20.9055873937404m, 37200899080192L, false);
        }

        [Test]
        public static void log_Fp2()
        {
            TestUtils.AreEqual(log(Fp2(0.0000000012m, 1.0m)), Fp2(-20.5409442801525m, 0m), 37200899080192L, false);
            TestUtils.AreEqual(log(Fp2(1200000000m, 1200000000m)), Fp2(20.9055873937404m, 20.9055873937404m), 37200899080192L, false);
        }

        [Test]
        public static void log_Fp3()
        {
            TestUtils.AreEqual(log(Fp3(0.0000000012m, 1.0m, 1200000000m)), Fp3(-20.5409442801525m, 0m, 20.9055873937404m), 37200899080192L, false);
        }

        [Test]
        public static void log_Fp4()
        {
            TestUtils.AreEqual(log(Fp4(0.0000000012m, 1.0m, 1200000000m, 1200000000m)), Fp4(-20.5409442801525m, 0m, 20.9055873937404m, 20.9055873937404m), 37200899080192L, false);
        }

        [Test]
        public static void log2_Fp()
        {
            TestUtils.AreEqual(log2(0.0000000012m), -29.6343184481525m, 37200899080192L, false);
            TestUtils.AreEqual(log2(1.0m), 0m, 37200899080192L, false);
            TestUtils.AreEqual(log2(1200000000m), 30.1603872598201m, 37200899080192L, false);
        }

        [Test]
        public static void log2_Fp2()
        {
            TestUtils.AreEqual(log2(Fp2(0.0000000012m, 1.0m)), Fp2(-29.6343184481525m, 0m), 37200899080192L, false);
            TestUtils.AreEqual(log2(Fp2(1200000000m, 1200000000m)), Fp2(30.1603872598201m, 30.1603872598201m), 37200899080192L, false);
        }

        [Test]
        public static void log2_Fp3()
        {
            TestUtils.AreEqual(log2(Fp3(0.0000000012m, 1.0m, 1200000000m)), Fp3(-29.6343184481525m, 0m, 30.1603872598201m), 37200899080192L, false);
        }

        [Test]
        public static void log2_Fp4()
        {
            TestUtils.AreEqual(log2(Fp4(0.0000000012m, 1.0m, 1200000000m, 1200000000m)), Fp4(-29.6343184481525m, 0m, 30.1603872598201m, 30.1603872598201m), 37200899080192L, false);
        }

        [Test]
        public static void radians_Fp()
        {
            TestUtils.AreEqual(radians(-123.45m), -2.15460896158699986m, 200000000, false);
            TestUtils.AreEqual(radians(0.0m), 0.0m, 200000000, false);
            TestUtils.AreEqual(radians(123.45m), 2.15460896158699986m, 200000000, false);
        }

        [Test]
        public static void radians_Fp2()
        {
            TestUtils.AreEqual(radians(Fp2(-123.45m, 0.0m)), Fp2(-2.15460896158699986m, 0.0m), 200000000, false);
            TestUtils.AreEqual(radians(Fp2(123.45m, 123.45m)), Fp2(2.15460896158699986m, 2.15460896158699986m), 200000000, false);
        }

        [Test]
        public static void radians_Fp3()
        {
            TestUtils.AreEqual(radians(Fp3(-123.45m, 0.0m, 123.45m)), Fp3(-2.15460896158699986m, 0.0m, 2.15460896158699986m), 200000000, false);
        }

        [Test]
        public static void radians_Fp4()
        {
            TestUtils.AreEqual(radians(Fp4(-123.45m, 0.0m, 123.45m, 123.45m)), Fp4(-2.15460896158699986m, 0.0m, 2.15460896158699986m, 2.15460896158699986m), 200000000, false);
        }

        [Test]
        public static void degrees_Fp()
        {
            TestUtils.AreEqual(degrees(-123.45m), -7073.1639808900125122m, 32000, false);
            TestUtils.AreEqual(degrees(0.0m), 0.0m, 32000, false);
            TestUtils.AreEqual(degrees(123.45m), 7073.1639808900125122m, 32000, false);
        }

        [Test]
        public static void degrees_Fp2()
        {
            TestUtils.AreEqual(degrees(Fp2(-123.45m, 0.0m)), Fp2(-7073.1639808900125122m, 0.0m), 32000, false);
            TestUtils.AreEqual(degrees(Fp2(123.45m, 123.45m)), Fp2(7073.1639808900125122m, 7073.1639808900125122m), 32000, false);
        }

        [Test]
        public static void degrees_Fp3()
        {
            TestUtils.AreEqual(degrees(Fp3(-123.45m, 0.0m, 123.45m)), Fp3(-7073.1639808900125122m, 0.0m, 7073.1639808900125122m), 32000, false);
        }

        [Test]
        public static void degrees_Fp4()
        {
            TestUtils.AreEqual(degrees(Fp4(-123.45m, 0.0m, 123.45m, 123.45m)), Fp4(-7073.1639808900125122m, 0.0m, 7073.1639808900125122m, 7073.1639808900125122m), 32000, false);
        }

        [Test]
        public static void sign_Fp()
        {
            TestUtils.AreEqual(sign(-123.45m), -1.0m);
            TestUtils.AreEqual(sign(-0.000000001m), -1.0m);
            TestUtils.AreEqual(sign(0.0m), 0.0m);
            TestUtils.AreEqual(sign(0.000000001m), 1.0m);
            TestUtils.AreEqual(sign(123.45m), 1.0m);
        }

        [Test]
        public static void sign_Fp2()
        {
            TestUtils.AreEqual(sign(Fp2(-123.45m, -0.000000001m)), Fp2(-1.0m, -1.0m));
            TestUtils.AreEqual(sign(Fp2(0.0m, 0.000000001m)), Fp2(0.0m, 1.0m));
            TestUtils.AreEqual(sign(Fp2(123.45m, 123.45m)), Fp2(1.0m, 1.0m));
        }

        [Test]
        public static void sign_Fp3()
        {
            TestUtils.AreEqual(sign(Fp3(-123.45m, -0.000000001m, 0.0m)), Fp3(-1.0m, -1.0m, 0.0m));
            TestUtils.AreEqual(sign(Fp3(0.000000001m, 123.45m, 123.45m)), Fp3(1.0m, 1.0m, 1.0m));
        }

        [Test]
        public static void sign_Fp4()
        {
            TestUtils.AreEqual(sign(Fp4(-123.45m, -0.000000001m, 0.0m, 0.000000001m)), Fp4(-1.0m, -1.0m, 0.0m, 1.0m));
            TestUtils.AreEqual(sign(Fp4(123.45m, 123.45m, 123.45m, 123.45m)), Fp4(1.0m, 1.0m, 1.0m, 1.0m));
        }

        [Test]
        public static void sqrt_Fp()
        {
            TestUtils.AreEqual(sqrt(0.0m), 0.0m, 200000000, false);
            TestUtils.AreEqual(sqrt(0.001m), 0.0316227766016838m, 200000000, false);
            TestUtils.AreEqual(sqrt(123.45m), 11.11080555135405m, 200000000, false);
        }

        [Test]
        public static void sqrt_Fp2()
        {
            TestUtils.AreEqual(sqrt(Fp2(0.0m, 0.001m)), Fp2(0.0m, 0.0316227766016838m), 200000000, false);
            TestUtils.AreEqual(sqrt(Fp2(123.45m, 123.45m)), Fp2(11.11080555135405m, 11.11080555135405m), 200000000, false);
        }

        [Test]
        public static void sqrt_Fp3()
        {
            TestUtils.AreEqual(sqrt(Fp3(0.0m, 0.001m, 123.45m)), Fp3(0.0m, 0.0316227766016838m, 11.11080555135405m), 200000000, false);
        }

        [Test]
        public static void sqrt_Fp4()
        {
            TestUtils.AreEqual(sqrt(Fp4(0.0m, 0.001m, 123.45m, 123.45m)), Fp4(0.0m, 0.0316227766016838m, 11.11080555135405m, 11.11080555135405m), 200000000, false);
        }

        [Test]
        public static void rsqrt_Fp()
        {
            TestUtils.AreEqual(rsqrt(1000000000m), 0.0000316227766016838m, 35359738368L, false);
            TestUtils.AreEqual(rsqrt(123.45m), 0.0900024751020984295m, 35359738368L, false);
        }

        [Test]
        public static void rsqrt_Fp2()
        {
            TestUtils.AreEqual(rsqrt(Fp2(1000000000m, 123.45m)), Fp2(0.0000316227766016838m, 0.0900024751020984295m), 35359738368L, false);
        }

        [Test]
        public static void rsqrt_Fp3()
        {
            TestUtils.AreEqual(rsqrt(Fp3(1000000000m, 123.45m, 123.45m)), Fp3(0.0000316227766016838m, 0.0900024751020984295m, 0.0900024751020984295m), 35359738368L, false);
        }

        [Test]
        public static void rsqrt_Fp4()
        {
            TestUtils.AreEqual(rsqrt(Fp4(1000000000m, 123.45m, 123.45m, 123.45m)), Fp4(0.0000316227766016838m, 0.0900024751020984295m, 0.0900024751020984295m, 0.0900024751020984295m), 35359738368L, false);
        }

        [Test]
        public static void rcp_Fp()
        {
            TestUtils.AreEqual(rcp(-123.45m), -0.0081004455245038477m, 200000000, false);
            TestUtils.AreEqual(rcp(123.45m), 0.0081004455245038477m, 200000000, false);
        }

        [Test]
        public static void rcp_Fp2()
        {
            TestUtils.AreEqual(rcp(Fp2(-123.45m, 123.45m)), Fp2(-0.0081004455245038477m, 0.0081004455245038477m), 200000000, false);
        }

        [Test]
        public static void rcp_Fp3()
        {
            TestUtils.AreEqual(rcp(Fp3(-123.45m, 123.45m, 123.45m)), Fp3(-0.0081004455245038477m, 0.0081004455245038477m, 0.0081004455245038477m), 200000000, false);
        }

        [Test]
        public static void rcp_Fp4()
        {
            TestUtils.AreEqual(rcp(Fp4(-123.45m, 123.45m, 123.45m, 123.45m)), Fp4(-0.0081004455245038477m, 0.0081004455245038477m, 0.0081004455245038477m, 0.0081004455245038477m), 200000000, false);
        }

        [Test]
        public static void floor_Fp()
        {
            TestUtils.AreEqual(floor(-100.51m), -101.0m);
            TestUtils.AreEqual(floor(-100.5m), -101.0m);
            TestUtils.AreEqual(floor(-100.49m), -101.0m);
            TestUtils.AreEqual(floor(0.0m), 0.0m);
            TestUtils.AreEqual(floor(100.49m), 100.0m);
            TestUtils.AreEqual(floor(100.50m), 100.0m);
            TestUtils.AreEqual(floor(100.51m), 100.0m);
        }

        [Test]
        public static void floor_Fp2()
        {
            TestUtils.AreEqual(floor(Fp2(-100.51m, -100.5m)), Fp2(-101.0m, -101.0m));
            TestUtils.AreEqual(floor(Fp2(-100.49m, 0.0m)), Fp2(-101.0m, 0.0m));
            TestUtils.AreEqual(floor(Fp2(100.49m, 100.50m)), Fp2(100.0m, 100.0m));
            TestUtils.AreEqual(floor(Fp2(100.51m, 100.51m)), Fp2(100.0m, 100.0m));
        }

        [Test]
        public static void floor_Fp3()
        {
            TestUtils.AreEqual(floor(Fp3(-100.51m, -100.5m, -100.49m)), Fp3(-101.0m, -101.0m, -101.0m));
            TestUtils.AreEqual(floor(Fp3(0.0m, 100.49m, 100.50m)), Fp3(0.0m, 100.0m, 100.0m));
            TestUtils.AreEqual(floor(Fp3(100.51m, 100.51m, 100.51m)), Fp3(100.0m, 100.0m, 100.0m));
        }

        [Test]
        public static void floor_Fp4()
        {
            TestUtils.AreEqual(floor(Fp4(-100.51m, -100.5m, -100.49m, 0.0m)), Fp4(-101.0m, -101.0m, -101.0m, 0.0m));
            TestUtils.AreEqual(floor(Fp4(100.49m, 100.50m, 100.51m, 100.51m)), Fp4(100.0m, 100.0m, 100.0m, 100.0m));
        }

        [Test]
        public static void ceil_Fp()
        {
            TestUtils.AreEqual(ceil(-100.51m), -100.0m);
            TestUtils.AreEqual(ceil(-100.5m), -100.0m);
            TestUtils.AreEqual(ceil(-100.49m), -100.0m);
            TestUtils.AreEqual(ceil(0.0m), 0.0m);
            TestUtils.AreEqual(ceil(100.49m), 101.0m);
            TestUtils.AreEqual(ceil(100.50m), 101.0m);
            TestUtils.AreEqual(ceil(100.51m), 101.0m);
        }

        [Test]
        public static void ceil_Fp2()
        {
            TestUtils.AreEqual(ceil(Fp2(-100.51m, -100.5m)), Fp2(-100.0m, -100.0m));
            TestUtils.AreEqual(ceil(Fp2(-100.49m, 0.0m)), Fp2(-100.0m, 0.0m));
            TestUtils.AreEqual(ceil(Fp2(100.49m, 100.50m)), Fp2(101.0m, 101.0m));
            TestUtils.AreEqual(ceil(Fp2(100.51m, 100.51m)), Fp2(101.0m, 101.0m));
        }

        [Test]
        public static void ceil_Fp3()
        {
            TestUtils.AreEqual(ceil(Fp3(-100.51m, -100.5m, -100.49m)), Fp3(-100.0m, -100.0m, -100.0m));
            TestUtils.AreEqual(ceil(Fp3(0.0m, 100.49m, 100.50m)), Fp3(0.0m, 101.0m, 101.0m));
            TestUtils.AreEqual(ceil(Fp3(100.51m, 100.51m, 100.51m)), Fp3(101.0m, 101.0m, 101.0m));
        }

        [Test]
        public static void ceil_Fp4()
        {
            TestUtils.AreEqual(ceil(Fp4(-100.51m, -100.5m, -100.49m, 0.0m)), Fp4(-100.0m, -100.0m, -100.0m, 0.0m));
            TestUtils.AreEqual(ceil(Fp4(100.49m, 100.50m, 100.51m, 100.51m)), Fp4(101.0m, 101.0m, 101.0m, 101.0m));
        }

        [Test]
        public static void round_Fp()
        {
            TestUtils.AreEqual(round(-100.51m), -101.0m);
            TestUtils.AreEqual(round(-100.5m), -100.0m);
            TestUtils.AreEqual(round(-100.49m), -100.0m);
            TestUtils.AreEqual(round(0.0m), 0.0m);
            TestUtils.AreEqual(round(100.49m), 100.0m);
            TestUtils.AreEqual(round(100.50m), 100.0m);
            TestUtils.AreEqual(round(100.51m), 101.0m);
            TestUtils.AreEqual(round(101.50m), 102.0m);
        }

        [Test]
        public static void round_Fp2()
        {
            TestUtils.AreEqual(round(Fp2(-100.51m, -100.5m)), Fp2(-101.0m, -100.0m));
            TestUtils.AreEqual(round(Fp2(-100.49m, 0.0m)), Fp2(-100.0m, 0.0m));
            TestUtils.AreEqual(round(Fp2(100.49m, 100.50m)), Fp2(100.0m, 100.0m));
            TestUtils.AreEqual(round(Fp2(100.51m, 101.50m)), Fp2(101.0m, 102.0m));
        }

        [Test]
        public static void round_Fp3()
        {
            TestUtils.AreEqual(round(Fp3(-100.51m, -100.5m, -100.49m)), Fp3(-101.0m, -100.0m, -100.0m));
            TestUtils.AreEqual(round(Fp3(0.0m, 100.49m, 100.50m)), Fp3(0.0m, 100.0m, 100.0m));
            TestUtils.AreEqual(round(Fp3(100.51m, 101.50m, 101.50m)), Fp3(101.0m, 102.0m, 102.0m));
        }

        [Test]
        public static void round_Fp4()
        {
            TestUtils.AreEqual(round(Fp4(-100.51m, -100.5m, -100.49m, 0.0m)), Fp4(-101.0m, -100.0m, -100.0m, 0.0m));
            TestUtils.AreEqual(round(Fp4(100.49m, 100.50m, 100.51m, 101.50m)), Fp4(100.0m, 100.0m, 101.0m, 102.0m));
        }

        [Test]
        public static void trunc_Fp()
        {
            TestUtils.AreEqual(trunc(-100.51m), -100.0m);
            TestUtils.AreEqual(trunc(-100.5m), -100.0m);
            TestUtils.AreEqual(trunc(-100.49m), -100.0m);
            TestUtils.AreEqual(trunc(0.0m), 0.0m);
            TestUtils.AreEqual(trunc(100.49m), 100.0m);
            TestUtils.AreEqual(trunc(100.50m), 100.0m);
            TestUtils.AreEqual(trunc(100.51m), 100.0m);
            TestUtils.AreEqual(trunc(101.50m), 101.0m);
        }

        [Test]
        public static void trunc_Fp2()
        {
            TestUtils.AreEqual(trunc(Fp2(-100.51m, -100.5m)), Fp2(-100.0m, -100.0m));
            TestUtils.AreEqual(trunc(Fp2(-100.49m, 0.0m)), Fp2(-100.0m, 0.0m));
            TestUtils.AreEqual(trunc(Fp2(100.49m, 100.50m)), Fp2(100.0m, 100.0m));
            TestUtils.AreEqual(trunc(Fp2(100.51m, 101.50m)), Fp2(100.0m, 101.0m));
        }

        [Test]
        public static void trunc_Fp3()
        {
            TestUtils.AreEqual(trunc(Fp3(-100.51m, -100.5m, -100.49m)), Fp3(-100.0m, -100.0m, -100.0m));
            TestUtils.AreEqual(trunc(Fp3(0.0m, 100.49m, 100.50m)), Fp3(0.0m, 100.0m, 100.0m));
            TestUtils.AreEqual(trunc(Fp3(100.51m, 101.50m, 101.50m)), Fp3(100.0m, 101.0m, 101.0m));
        }

        [Test]
        public static void trunc_Fp4()
        {
            TestUtils.AreEqual(trunc(Fp4(-100.51m, -100.5m, -100.49m, 0.0m)), Fp4(-100.0m, -100.0m, -100.0m, 0.0m));
            TestUtils.AreEqual(trunc(Fp4(100.49m, 100.50m, 100.51m, 101.50m)), Fp4(100.0m, 100.0m, 100.0m, 101.0m));
        }

        [Test]
        public static void frac_Fp()
        {
            TestUtils.AreEqual(frac(-1000000000m), 0.0m, 200000000, false);
            TestUtils.AreEqual(frac(-100.3m), 0.7m, 200000000, false);
            TestUtils.AreEqual(frac(0.0m), 0.0m, 200000000, false);
            TestUtils.AreEqual(frac(100.8m), 0.8m, 200000000, false);
        }

        [Test]
        public static void frac_Fp2()
        {
            TestUtils.AreEqual(frac(Fp2(-1000000000m, -100.3m)), Fp2(0.0m, 0.7m), 200000000, false);
            TestUtils.AreEqual(frac(Fp2(0.0m, 100.8m)), Fp2(0.0m, 0.8m), 200000000, false);
        }

        [Test]
        public static void frac_Fp3()
        {
            TestUtils.AreEqual(frac(Fp3(-1000000000m, -100.3m, 0.0m)), Fp3(0.0m, 0.7m, 0.0m), 200000000, false);
            TestUtils.AreEqual(frac(Fp3(100.8m, 100.8m, 100.8m)), Fp3(0.8m, 0.8m, 0.8m), 200000000, false);
        }

        [Test]
        public static void frac_Fp4()
        {
            TestUtils.AreEqual(frac(Fp4(-1000000000m, -100.3m, 0.0m, 100.8m)), Fp4(0.0m, 0.7m, 0.0m, 0.8m), 200000000, false);
        }

        [Test]
        public static void lerp_Fp()
        {
            TestUtils.AreEqual(lerp(-123.45m, 439.43m, -1.5m), -967.77m, 1024, false);
            TestUtils.AreEqual(lerp(-123.45m, 439.43m, 0.5m), 157.99m, 1024, false);
            TestUtils.AreEqual(lerp(-123.45m, 439.43m, 5.5m), 2972.39m, 1024, false);
        }

        [Test]
        public static void lerp_Fp2()
        {
            TestUtils.AreEqual(lerp(Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m), Fp2(-1.5m, 0.5m)), Fp2(-967.77m, 157.99m), 1024, false);
            TestUtils.AreEqual(lerp(Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m), Fp2(5.5m, 5.5m)), Fp2(2972.39m, 2972.39m), 1024, false);
        }

        [Test]
        public static void lerp_Fp3()
        {
            TestUtils.AreEqual(lerp(Fp3(-123.45m, -123.45m, -123.45m), Fp3(439.43m, 439.43m, 439.43m), Fp3(-1.5m, 0.5m, 5.5m)), Fp3(-967.77m, 157.99m, 2972.39m), 1024, false);
        }

        [Test]
        public static void lerp_Fp4()
        {
            TestUtils.AreEqual(lerp(Fp4(-123.45m, -123.45m, -123.45m, -123.45m), Fp4(439.43m, 439.43m, 439.43m, 439.43m), Fp4(-1.5m, 0.5m, 5.5m, 5.5m)), Fp4(-967.77m, 157.99m, 2972.39m, 2972.39m), 1024, false);
        }

        [Test]
        public static void unlerp_Fp()
        {
            TestUtils.AreEqual(unlerp(-123.45m, 439.43m, -254.3m), -0.23246517907902217m, 200000000, false);
            TestUtils.AreEqual(unlerp(-123.45m, 439.43m, 0.0m), 0.21931850483229107m, 200000000, false);
            TestUtils.AreEqual(unlerp(-123.45m, 439.43m, 632.1m), 1.3422932063672541m, 200000000, false);
            TestUtils.AreEqual(unlerp(439.43m, -123.45m, -254.3m), 1.2324651790790221m, 200000000, false);
            TestUtils.AreEqual(unlerp(439.43m, -123.45m, 0.0m), 0.78068149516770893m, 200000000, false);
            TestUtils.AreEqual(unlerp(439.43m, -123.45m, 632.1m), -0.34229320636725412m, 200000000, false);
        }

        [Test]
        public static void unlerp_Fp2()
        {
            TestUtils.AreEqual(unlerp(Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m), Fp2(-254.3m, 0.0m)), Fp2(-0.23246517907902217m, 0.21931850483229107m), 200000000, false);
            TestUtils.AreEqual(unlerp(Fp2(-123.45m, 439.43m), Fp2(439.43m, -123.45m), Fp2(632.1m, -254.3m)), Fp2(1.3422932063672541m, 1.2324651790790221m), 200000000, false);
            TestUtils.AreEqual(unlerp(Fp2(439.43m, 439.43m), Fp2(-123.45m, -123.45m), Fp2(0.0m, 632.1m)), Fp2(0.78068149516770893m, -0.34229320636725412m), 200000000, false);
        }

        [Test]
        public static void unlerp_Fp3()
        {
            TestUtils.AreEqual(unlerp(Fp3(-123.45m, -123.45m, -123.45m), Fp3(439.43m, 439.43m, 439.43m), Fp3(-254.3m, 0.0m, 632.1m)), Fp3(-0.23246517907902217m, 0.21931850483229107m, 1.3422932063672541m), 200000000, false);
            TestUtils.AreEqual(unlerp(Fp3(439.43m, 439.43m, 439.43m), Fp3(-123.45m, -123.45m, -123.45m), Fp3(-254.3m, 0.0m, 632.1m)), Fp3(1.2324651790790221m, 0.78068149516770893m, -0.34229320636725412m), 200000000, false);
        }

        [Test]
        public static void unlerp_Fp4()
        {
            TestUtils.AreEqual(unlerp(Fp4(-123.45m, -123.45m, -123.45m, 439.43m), Fp4(439.43m, 439.43m, 439.43m, -123.45m), Fp4(-254.3m, 0.0m, 632.1m, -254.3m)), Fp4(-0.23246517907902217m, 0.21931850483229107m, 1.3422932063672541m, 1.2324651790790221m), 200000000, false);
            TestUtils.AreEqual(unlerp(Fp4(439.43m, 439.43m, 439.43m, 439.43m), Fp4(-123.45m, -123.45m, -123.45m, -123.45m), Fp4(0.0m, 632.1m, 632.1m, 632.1m)), Fp4(0.78068149516770893m, -0.34229320636725412m, -0.34229320636725412m, -0.34229320636725412m), 200000000, false);
        }

        [Test]
        public static void remap_Fp()
        {
            TestUtils.AreEqual(remap(-123.45m, 439.43m, 541.3m, 631.5m, -200.0m), 529.03306921546333m, 128000, false);
            TestUtils.AreEqual(remap(-123.45m, 439.43m, 541.3m, 631.5m, -100.0m), 545.05779917566799m, 128000, false);
            TestUtils.AreEqual(remap(-123.45m, 439.43m, 541.3m, 631.5m, 500.0m), 641.20617893689596m, 128000, false);
            TestUtils.AreEqual(remap(439.43m, -123.45m, 541.3m, 631.5m, -200.0m), 643.76693078453667m, 128000, false);
            TestUtils.AreEqual(remap(439.43m, -123.45m, 541.3m, 631.5m, -100.0m), 627.74220082433201m, 128000, false);
            TestUtils.AreEqual(remap(439.43m, -123.45m, 541.3m, 631.5m, 500.0m), 531.59382106310404m, 128000, false);
            TestUtils.AreEqual(remap(-123.45m, 439.43m, 631.5m, 541.3m, -200.0m), 643.76693078453667m, 128000, false);
            TestUtils.AreEqual(remap(-123.45m, 439.43m, 631.5m, 541.3m, -100.0m), 627.74220082433201m, 128000, false);
            TestUtils.AreEqual(remap(-123.45m, 439.43m, 631.5m, 541.3m, 500.0m), 531.59382106310404m, 128000, false);
        }

        [Test]
        public static void remap_Fp2()
        {
            TestUtils.AreEqual(remap(Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m), Fp2(541.3m, 541.3m), Fp2(631.5m, 631.5m), Fp2(-200.0m, -100.0m)), Fp2(529.03306921546333m, 545.05779917566799m), 128000, false);
            TestUtils.AreEqual(remap(Fp2(-123.45m, 439.43m), Fp2(439.43m, -123.45m), Fp2(541.3m, 541.3m), Fp2(631.5m, 631.5m), Fp2(500.0m, -200.0m)), Fp2(641.20617893689596m, 643.76693078453667m), 128000, false);
            TestUtils.AreEqual(remap(Fp2(439.43m, 439.43m), Fp2(-123.45m, -123.45m), Fp2(541.3m, 541.3m), Fp2(631.5m, 631.5m), Fp2(-100.0m, 500.0m)), Fp2(627.74220082433201m, 531.59382106310404m), 128000, false);
            TestUtils.AreEqual(remap(Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m), Fp2(631.5m, 631.5m), Fp2(541.3m, 541.3m), Fp2(-200.0m, -100.0m)), Fp2(643.76693078453667m, 627.74220082433201m), 128000, false);
            TestUtils.AreEqual(remap(Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m), Fp2(631.5m, 631.5m), Fp2(541.3m, 541.3m), Fp2(500.0m, 500.0m)), Fp2(531.59382106310404m, 531.59382106310404m), 128000, false);
        }

        [Test]
        public static void remap_Fp3()
        {
            TestUtils.AreEqual(remap(Fp3(-123.45m, -123.45m, -123.45m), Fp3(439.43m, 439.43m, 439.43m), Fp3(541.3m, 541.3m, 541.3m), Fp3(631.5m, 631.5m, 631.5m), Fp3(-200.0m, -100.0m, 500.0m)), Fp3(529.03306921546333m, 545.05779917566799m, 641.20617893689596m), 128000, false);
            TestUtils.AreEqual(remap(Fp3(439.43m, 439.43m, 439.43m), Fp3(-123.45m, -123.45m, -123.45m), Fp3(541.3m, 541.3m, 541.3m), Fp3(631.5m, 631.5m, 631.5m), Fp3(-200.0m, -100.0m, 500.0m)), Fp3(643.76693078453667m, 627.74220082433201m, 531.59382106310404m), 128000, false);
            TestUtils.AreEqual(remap(Fp3(-123.45m, -123.45m, -123.45m), Fp3(439.43m, 439.43m, 439.43m), Fp3(631.5m, 631.5m, 631.5m), Fp3(541.3m, 541.3m, 541.3m), Fp3(-200.0m, -100.0m, 500.0m)), Fp3(643.76693078453667m, 627.74220082433201m, 531.59382106310404m), 128000, false);
        }

        [Test]
        public static void remap_Fp4()
        {
            TestUtils.AreEqual(remap(Fp4(-123.45m, -123.45m, -123.45m, 439.43m), Fp4(439.43m, 439.43m, 439.43m, -123.45m), Fp4(541.3m, 541.3m, 541.3m, 541.3m), Fp4(631.5m, 631.5m, 631.5m, 631.5m), Fp4(-200.0m, -100.0m, 500.0m, -200.0m)), Fp4(529.03306921546333m, 545.05779917566799m, 641.20617893689596m, 643.76693078453667m), 128000, false);
            TestUtils.AreEqual(remap(Fp4(439.43m, 439.43m, -123.45m, -123.45m), Fp4(-123.45m, -123.45m, 439.43m, 439.43m), Fp4(541.3m, 541.3m, 631.5m, 631.5m), Fp4(631.5m, 631.5m, 541.3m, 541.3m), Fp4(-100.0m, 500.0m, -200.0m, -100.0m)), Fp4(627.74220082433201m, 531.59382106310404m, 643.76693078453667m, 627.74220082433201m), 128000, false);
            TestUtils.AreEqual(remap(Fp4(-123.45m, -123.45m, -123.45m, -123.45m), Fp4(439.43m, 439.43m, 439.43m, 439.43m), Fp4(631.5m, 631.5m, 631.5m, 631.5m), Fp4(541.3m, 541.3m, 541.3m, 541.3m), Fp4(500.0m, 500.0m, 500.0m, 500.0m)), Fp4(531.59382106310404m, 531.59382106310404m, 531.59382106310404m, 531.59382106310404m), 128000, false);
        }

        [Test]
        public static void clamp_Fp()
        {
            TestUtils.AreEqual(clamp(-254.3m, -123.45m, 439.43m), -123.45m);
            TestUtils.AreEqual(clamp(246.3m, -123.45m, 439.43m), 246.3m);
            TestUtils.AreEqual(clamp(632.1m, -123.45m, 439.43m), 439.43m);
            TestUtils.AreEqual(clamp(-254.3m, 439.43m, -123.45m), 439.43m);
            TestUtils.AreEqual(clamp(246.3m, 439.43m, -123.45m), 439.43m);
            TestUtils.AreEqual(clamp(632.1m, 439.43m, -123.45m), 439.43m);
        }

        [Test]
        public static void clamp_Fp2()
        {
            TestUtils.AreEqual(clamp(Fp2(-254.3m, 246.3m), Fp2(-123.45m, -123.45m), Fp2(439.43m, 439.43m)), Fp2(-123.45m, 246.3m));
            TestUtils.AreEqual(clamp(Fp2(632.1m, -254.3m), Fp2(-123.45m, 439.43m), Fp2(439.43m, -123.45m)), Fp2(439.43m, 439.43m));
            TestUtils.AreEqual(clamp(Fp2(246.3m, 632.1m), Fp2(439.43m, 439.43m), Fp2(-123.45m, -123.45m)), Fp2(439.43m, 439.43m));
        }

        [Test]
        public static void clamp_Fp3()
        {
            TestUtils.AreEqual(clamp(Fp3(-254.3m, 246.3m, 632.1m), Fp3(-123.45m, -123.45m, -123.45m), Fp3(439.43m, 439.43m, 439.43m)), Fp3(-123.45m, 246.3m, 439.43m));
            TestUtils.AreEqual(clamp(Fp3(-254.3m, 246.3m, 632.1m), Fp3(439.43m, 439.43m, 439.43m), Fp3(-123.45m, -123.45m, -123.45m)), Fp3(439.43m, 439.43m, 439.43m));
        }

        [Test]
        public static void clamp_Fp4()
        {
            TestUtils.AreEqual(clamp(Fp4(-254.3m, 246.3m, 632.1m, -254.3m), Fp4(-123.45m, -123.45m, -123.45m, 439.43m), Fp4(439.43m, 439.43m, 439.43m, -123.45m)), Fp4(-123.45m, 246.3m, 439.43m, 439.43m));
            TestUtils.AreEqual(clamp(Fp4(246.3m, 632.1m, 632.1m, 632.1m), Fp4(439.43m, 439.43m, 439.43m, 439.43m), Fp4(-123.45m, -123.45m, -123.45m, -123.45m)), Fp4(439.43m, 439.43m, 439.43m, 439.43m));
        }

        [Test]
        public static void saturate_Fp()
        {
            TestUtils.AreEqual(saturate(-123.45m), 0.0m);
            TestUtils.AreEqual(saturate(0.0m), 0.0m);
            TestUtils.AreEqual(saturate(0.5m), 0.5m);
            TestUtils.AreEqual(saturate(1.0m), 1.0m);
        }

        [Test]
        public static void saturate_Fp2()
        {
            TestUtils.AreEqual(saturate(Fp2(-123.45m, 0.0m)), Fp2(0.0m, 0.0m));
            TestUtils.AreEqual(saturate(Fp2(0.5m, 1.0m)), Fp2(0.5m, 1.0m));
        }

        [Test]
        public static void saturate_Fp3()
        {
            TestUtils.AreEqual(saturate(Fp3(-123.45m, 0.0m, 0.5m)), Fp3(0.0m, 0.0m, 0.5m));
            TestUtils.AreEqual(saturate(Fp3(1.0m, 1.0m, 1.0m)), Fp3(1.0m, 1.0m, 1.0m));
        }

        [Test]
        public static void saturate_Fp4()
        {
            TestUtils.AreEqual(saturate(Fp4(-123.45m, 0.0m, 0.5m, 1.0m)), Fp4(0.0m, 0.0m, 0.5m, 1.0m));
        }

        [Test]
        public static void step_Fp()
        {
            TestUtils.AreEqual(step(-123.45m, -200.0m), 0.0m);
            TestUtils.AreEqual(step(-123.45m, 200.0m), 1.0m);
            TestUtils.AreEqual(step(123.45m, -200.0m), 0.0m);
            TestUtils.AreEqual(step(123.45m, 200.0m), 1.0m);
        }

        [Test]
        public static void step_Fp2()
        {
            TestUtils.AreEqual(step(Fp2(-123.45m, -123.45m), Fp2(-200.0m, 200.0m)), Fp2(0.0m, 1.0m));
            TestUtils.AreEqual(step(Fp2(123.45m, 123.45m), Fp2(-200.0m, 200.0m)), Fp2(0.0m, 1.0m));
        }

        [Test]
        public static void step_Fp3()
        {
            TestUtils.AreEqual(step(Fp3(-123.45m, -123.45m, 123.45m), Fp3(-200.0m, 200.0m, -200.0m)), Fp3(0.0m, 1.0m, 0.0m));
            TestUtils.AreEqual(step(Fp3(123.45m, 123.45m, 123.45m), Fp3(200.0m, 200.0m, 200.0m)), Fp3(1.0m, 1.0m, 1.0m));
        }

        [Test]
        public static void step_Fp4()
        {
            TestUtils.AreEqual(step(Fp4(-123.45m, -123.45m, 123.45m, 123.45m), Fp4(-200.0m, 200.0m, -200.0m, 200.0m)), Fp4(0.0m, 1.0m, 0.0m, 1.0m));
        }

        [Test]
        public static void min_Fp()
        {
            TestUtils.AreEqual(min(-1234.56m, -3456.7m), -3456.7m);
            TestUtils.AreEqual(min(-3456.7m, -1234.56m), -3456.7m);
            TestUtils.AreEqual(min(-1234.56m, 3456.7m), -1234.56m);
            TestUtils.AreEqual(min(3456.7m, -1234.56m), -1234.56m);
            TestUtils.AreEqual(min(1234.56m, 3456.7m), 1234.56m);
            TestUtils.AreEqual(min(3456.7m, 1234.56m), 1234.56m);
        }

        [Test]
        public static void min_Fp2()
        {
            TestUtils.AreEqual(min(Fp2(-1234.56m, -3456.7m), Fp2(-3456.7m, -1234.56m)), Fp2(-3456.7m, -3456.7m));
            TestUtils.AreEqual(min(Fp2(-1234.56m, 3456.7m), Fp2(3456.7m, -1234.56m)), Fp2(-1234.56m, -1234.56m));
            TestUtils.AreEqual(min(Fp2(1234.56m, 3456.7m), Fp2(3456.7m, 1234.56m)), Fp2(1234.56m, 1234.56m));
        }

        [Test]
        public static void min_Fp3()
        {
            TestUtils.AreEqual(min(Fp3(-1234.56m, -3456.7m, -1234.56m), Fp3(-3456.7m, -1234.56m, 3456.7m)), Fp3(-3456.7m, -3456.7m, -1234.56m));
            TestUtils.AreEqual(min(Fp3(3456.7m, 1234.56m, 3456.7m), Fp3(-1234.56m, 3456.7m, 1234.56m)), Fp3(-1234.56m, 1234.56m, 1234.56m));
        }

        [Test]
        public static void min_Fp4()
        {
            TestUtils.AreEqual(min(Fp4(-1234.56m, -3456.7m, -1234.56m, 3456.7m), Fp4(-3456.7m, -1234.56m, 3456.7m, -1234.56m)), Fp4(-3456.7m, -3456.7m, -1234.56m, -1234.56m));
            TestUtils.AreEqual(min(Fp4(1234.56m, 3456.7m, 3456.7m, 3456.7m), Fp4(3456.7m, 1234.56m, 1234.56m, 1234.56m)), Fp4(1234.56m, 1234.56m, 1234.56m, 1234.56m));
        }

        [Test]
        public static void max_Fp()
        {
            TestUtils.AreEqual(max(-1234.56m, -3456.7m), -1234.56m);
            TestUtils.AreEqual(max(-3456.7m, -1234.56m), -1234.56m);
            TestUtils.AreEqual(max(-1234.56m, 3456.7m), 3456.7m);
            TestUtils.AreEqual(max(3456.7m, -1234.56m), 3456.7m);
            TestUtils.AreEqual(max(1234.56m, 3456.7m), 3456.7m);
            TestUtils.AreEqual(max(3456.7m, 1234.56m), 3456.7m);
        }

        [Test]
        public static void max_Fp2()
        {
            TestUtils.AreEqual(max(Fp2(-1234.56m, -3456.7m), Fp2(-3456.7m, -1234.56m)), Fp2(-1234.56m, -1234.56m));
            TestUtils.AreEqual(max(Fp2(-1234.56m, 3456.7m), Fp2(3456.7m, -1234.56m)), Fp2(3456.7m, 3456.7m));
            TestUtils.AreEqual(max(Fp2(1234.56m, 3456.7m), Fp2(3456.7m, 1234.56m)), Fp2(3456.7m, 3456.7m));
        }

        [Test]
        public static void max_Fp3()
        {
            TestUtils.AreEqual(max(Fp3(-1234.56m, -3456.7m, -1234.56m), Fp3(-3456.7m, -1234.56m, 3456.7m)), Fp3(-1234.56m, -1234.56m, 3456.7m));
            TestUtils.AreEqual(max(Fp3(3456.7m, 1234.56m, 3456.7m), Fp3(-1234.56m, 3456.7m, 1234.56m)), Fp3(3456.7m, 3456.7m, 3456.7m));
        }

        [Test]
        public static void max_Fp4()
        {
            TestUtils.AreEqual(max(Fp4(-1234.56m, -3456.7m, -1234.56m, 3456.7m), Fp4(-3456.7m, -1234.56m, 3456.7m, -1234.56m)), Fp4(-1234.56m, -1234.56m, 3456.7m, 3456.7m));
            TestUtils.AreEqual(max(Fp4(1234.56m, 3456.7m, 3456.7m, 3456.7m), Fp4(3456.7m, 1234.56m, 1234.56m, 1234.56m)), Fp4(3456.7m, 3456.7m, 3456.7m, 3456.7m));
        }

        [Test]
        public static void smoothStep_Fp()
        {
            TestUtils.AreEqual(smoothStep(-123.45m, 345.6m, -200.0m), 0.0m, 35359738368L, false);
            TestUtils.AreEqual(smoothStep(-123.45m, 345.6m, -100.0m), 0.0072484810488798993m, 35359738368L, false);
            TestUtils.AreEqual(smoothStep(-123.45m, 345.6m, 400.0m), 1.0m, 35359738368L, false);
            TestUtils.AreEqual(smoothStep(345.6m, -123.45m, -200.0m), 1.0m, 35359738368L, false);
            TestUtils.AreEqual(smoothStep(345.6m, -123.45m, -100.0m), 0.9927515189511201007m, 35359738368L, false);
            TestUtils.AreEqual(smoothStep(345.6m, -123.45m, 400.0m), 0.0m, 35359738368L, false);
        }

        [Test]
        public static void smoothStep_Fp2()
        {
            TestUtils.AreEqual(smoothStep(Fp2(-123.45m, -123.45m), Fp2(345.6m, 345.6m), Fp2(-200.0m, -100.0m)), Fp2(0.0m, 0.0072484810488798993m), 35359738368L, false);
            TestUtils.AreEqual(smoothStep(Fp2(-123.45m, 345.6m), Fp2(345.6m, -123.45m), Fp2(400.0m, -200.0m)), Fp2(1.0m, 1.0m), 35359738368L, false);
            TestUtils.AreEqual(smoothStep(Fp2(345.6m, 345.6m), Fp2(-123.45m, -123.45m), Fp2(-100.0m, 400.0m)), Fp2(0.9927515189511201007m, 0.0m), 35359738368L, false);
        }

        [Test]
        public static void smoothStep_Fp3()
        {
            TestUtils.AreEqual(smoothStep(Fp3(-123.45m, -123.45m, -123.45m), Fp3(345.6m, 345.6m, 345.6m), Fp3(-200.0m, -100.0m, 400.0m)), Fp3(0.0m, 0.0072484810488798993m, 1.0m), 35359738368L, false);
            TestUtils.AreEqual(smoothStep(Fp3(345.6m, 345.6m, 345.6m), Fp3(-123.45m, -123.45m, -123.45m), Fp3(-200.0m, -100.0m, 400.0m)), Fp3(1.0m, 0.9927515189511201007m, 0.0m), 35359738368L, false);
        }

        [Test]
        public static void smoothStep_Fp4()
        {
            TestUtils.AreEqual(smoothStep(Fp4(-123.45m, -123.45m, -123.45m, 345.6m), Fp4(345.6m, 345.6m, 345.6m, -123.45m), Fp4(-200.0m, -100.0m, 400.0m, -200.0m)), Fp4(0.0m, 0.0072484810488798993m, 1.0m, 1.0m), 35359738368L, false);
            TestUtils.AreEqual(smoothStep(Fp4(345.6m, 345.6m, 345.6m, 345.6m), Fp4(-123.45m, -123.45m, -123.45m, -123.45m), Fp4(-100.0m, 400.0m, 400.0m, 400.0m)), Fp4(0.9927515189511201007m, 0.0m, 0.0m, 0.0m), 35359738368L, false);
        }

        [Test]
        public static void mad_Fp()
        {
            TestUtils.AreEqual(mad(-123.45m, 345.6m, 4.321m), -42659.999m, 32000, false);
        }

        [Test]
        public static void mad_Fp2()
        {
            TestUtils.AreEqual(mad(Fp2(-123.45m, -123.45m), Fp2(345.6m, 345.6m), Fp2(4.321m, 4.321m)), Fp2(-42659.999m, -42659.999m), 32000, false);
        }

        [Test]
        public static void mad_Fp3()
        {
            TestUtils.AreEqual(mad(Fp3(-123.45m, -123.45m, -123.45m), Fp3(345.6m, 345.6m, 345.6m), Fp3(4.321m, 4.321m, 4.321m)), Fp3(-42659.999m, -42659.999m, -42659.999m), 32000, false);
        }

        [Test]
        public static void mad_Fp4()
        {
            TestUtils.AreEqual(mad(Fp4(-123.45m, -123.45m, -123.45m, -123.45m), Fp4(345.6m, 345.6m, 345.6m, 345.6m), Fp4(4.321m, 4.321m, 4.321m, 4.321m)), Fp4(-42659.999m, -42659.999m, -42659.999m, -42659.999m), 32000, false);
        }

        [Test]
        public static void fmod_Fp()
        {
            TestUtils.AreEqual(fmod(-323.4m, -123.6m), -76.2m, 32000, false);
            TestUtils.AreEqual(fmod(0.0m, -123.6m), 0.0m, 32000, false);
            TestUtils.AreEqual(fmod(0.0m, -123.6m), 0.0m, 32000, false);
            TestUtils.AreEqual(fmod(323.4m, -123.6m), 76.2m, 32000, false);
            TestUtils.AreEqual(fmod(-323.4m, 123.6m), -76.2m, 32000, false);
            TestUtils.AreEqual(fmod(0.0m, 123.6m), 0.0m, 32000, false);
            TestUtils.AreEqual(fmod(0.0m, 123.6m), 0.0m, 32000, false);
            TestUtils.AreEqual(fmod(323.4m, 123.6m), 76.2m, 32000, false);
        }

        [Test]
        public static void fmod_Fp2()
        {
            TestUtils.AreEqual(fmod(Fp2(-323.4m, 0.0m), Fp2(-123.6m, -123.6m)), Fp2(-76.2m, 0.0m), 32000, false);
            TestUtils.AreEqual(fmod(Fp2(0.0m, 323.4m), Fp2(-123.6m, -123.6m)), Fp2(0.0m, 76.2m), 32000, false);
            TestUtils.AreEqual(fmod(Fp2(-323.4m, 0.0m), Fp2(123.6m, 123.6m)), Fp2(-76.2m, 0.0m), 32000, false);
            TestUtils.AreEqual(fmod(Fp2(0.0m, 323.4m), Fp2(123.6m, 123.6m)), Fp2(0.0m, 76.2m), 32000, false);
        }

        [Test]
        public static void fmod_Fp3()
        {
            TestUtils.AreEqual(fmod(Fp3(-323.4m, 0.0m, 0.0m), Fp3(-123.6m, -123.6m, -123.6m)), Fp3(-76.2m, 0.0m, 0.0m), 32000, false);
            TestUtils.AreEqual(fmod(Fp3(323.4m, -323.4m, 0.0m), Fp3(-123.6m, 123.6m, 123.6m)), Fp3(76.2m, -76.2m, 0.0m), 32000, false);
            TestUtils.AreEqual(fmod(Fp3(0.0m, 323.4m, 323.4m), Fp3(123.6m, 123.6m, 123.6m)), Fp3(0.0m, 76.2m, 76.2m), 32000, false);
        }

        [Test]
        public static void fmod_Fp4()
        {
            TestUtils.AreEqual(fmod(Fp4(-323.4m, 0.0m, 0.0m, 323.4m), Fp4(-123.6m, -123.6m, -123.6m, -123.6m)), Fp4(-76.2m, 0.0m, 0.0m, 76.2m), 32000, false);
            TestUtils.AreEqual(fmod(Fp4(-323.4m, 0.0m, 0.0m, 323.4m), Fp4(123.6m, 123.6m, 123.6m, 123.6m)), Fp4(-76.2m, 0.0m, 0.0m, 76.2m), 32000, false);
        }

        [Test]
        public static void pow_Fp()
        {
            TestUtils.AreEqual(pow(3.4m, -2.6m), 0.041510199028461224m, 200000000, false);
            TestUtils.AreEqual(pow(-3.4m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(0.0m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(0.0m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(3.4m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(-3.4m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(0.0m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(0.0m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(3.4m, 0.0m), 1.0m, 200000000, false);
            TestUtils.AreEqual(pow(0.0m, 2.6m), 0.0m, 200000000, false);
            TestUtils.AreEqual(pow(0.0m, 2.6m), 0.0m, 200000000, false);
            TestUtils.AreEqual(pow(3.4m, 2.6m), 24.090465076169736m, 200000000, false);
        }

        [Test]
        public static void pow_Fp2()
        {
            TestUtils.AreEqual(pow(Fp2(3.4m, -3.4m), Fp2(-2.6m, 0.0m)), Fp2(0.041510199028461224m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp2(0.0m, 0.0m), Fp2(0.0m, 0.0m)), Fp2(1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp2(3.4m, -3.4m), Fp2(0.0m, 0.0m)), Fp2(1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp2(0.0m, 0.0m), Fp2(0.0m, 0.0m)), Fp2(1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp2(3.4m, 0.0m), Fp2(0.0m, 2.6m)), Fp2(1.0m, 0.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp2(0.0m, 3.4m), Fp2(2.6m, 2.6m)), Fp2(0.0m, 24.090465076169736m), 200000000, false);
        }

        [Test]
        public static void pow_Fp3()
        {
            TestUtils.AreEqual(pow(Fp3(3.4m, -3.4m, 0.0m), Fp3(-2.6m, 0.0m, 0.0m)), Fp3(0.041510199028461224m, 1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp3(0.0m, 3.4m, -3.4m), Fp3(0.0m, 0.0m, 0.0m)), Fp3(1.0m, 1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp3(0.0m, 0.0m, 3.4m), Fp3(0.0m, 0.0m, 0.0m)), Fp3(1.0m, 1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp3(0.0m, 0.0m, 3.4m), Fp3(2.6m, 2.6m, 2.6m)), Fp3(0.0m, 0.0m, 24.090465076169736m), 200000000, false);
        }

        [Test]
        public static void pow_Fp4()
        {
            TestUtils.AreEqual(pow(Fp4(3.4m, -3.4m, 0.0m, 0.0m), Fp4(-2.6m, 0.0m, 0.0m, 0.0m)), Fp4(0.041510199028461224m, 1.0m, 1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp4(3.4m, -3.4m, 0.0m, 0.0m), Fp4(0.0m, 0.0m, 0.0m, 0.0m)), Fp4(1.0m, 1.0m, 1.0m, 1.0m), 200000000, false);
            TestUtils.AreEqual(pow(Fp4(3.4m, 0.0m, 0.0m, 3.4m), Fp4(0.0m, 2.6m, 2.6m, 2.6m)), Fp4(1.0m, 0.0m, 0.0m, 24.090465076169736m), 200000000, false);
        }

#endif

    }
}
