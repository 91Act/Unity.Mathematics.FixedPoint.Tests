//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.FixedPoint.MathFp;
namespace Unity.Mathematics.FixedPoint.Tests
{
    [TestFixture]
    public class TestFp3
    {
#if ENABLE_DECIMAL
        [Test]
        public static void Fp3_zero()
        {
            TestUtils.AreEqual(Fp3.zero.x, (Fp)0);
            TestUtils.AreEqual(Fp3.zero.y, (Fp)0);
            TestUtils.AreEqual(Fp3.zero.z, (Fp)0);
        }

        [Test]
        public static void Fp3_constructor()
        {
            Fp3 a = new Fp3(1, 2, 3);
            TestUtils.AreEqual(a.x, 1);
            TestUtils.AreEqual(a.y, 2);
            TestUtils.AreEqual(a.z, 3);
        }

        [Test]
        public static void Fp3_scalar_constructor()
        {
            Fp3 a = new Fp3(17.0m);
            TestUtils.AreEqual(a.x, 17.0m);
            TestUtils.AreEqual(a.y, 17.0m);
            TestUtils.AreEqual(a.z, 17.0m);
        }

        [Test]
        public static void Fp3_static_constructor()
        {
            Fp3 a = Fp3(1, 2, 3);
            TestUtils.AreEqual(a.x, 1);
            TestUtils.AreEqual(a.y, 2);
            TestUtils.AreEqual(a.z, 3);
        }

        [Test]
        public static void Fp3_static_scalar_constructor()
        {
            Fp3 a = Fp3(17.0m);
            TestUtils.AreEqual(a.x, 17.0m);
            TestUtils.AreEqual(a.y, 17.0m);
            TestUtils.AreEqual(a.z, 17.0m);
        }

        [Test]
        public static void Fp3_operator_equal_wide_wide()
        {
            Fp3 a0 = Fp3(304.0451m, -242.63562m, 323.91107m);
            Fp3 b0 = Fp3(-264.28522m, -218.33426m, 253.03296m);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            Fp3 a1 = Fp3(-435.55502m, 198.06403m, -117.03351m);
            Fp3 b1 = Fp3(372.23932m, -171.82083m, 49.70288m);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            Fp3 a2 = Fp3(-384.73096m, 304.45056m, 57.849m);
            Fp3 b2 = Fp3(261.85016m, -238.16519m, -368.79456m);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            Fp3 a3 = Fp3(245.8263m, -303.59222m, -446.4428m);
            Fp3 b3 = Fp3(-479.64792m, 213.87708m, -320.8371m);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void Fp3_operator_equal_wide_scalar()
        {
            Fp3 a0 = Fp3(-441.88464m, -84.34961m, -254.78915m);
            Fp b0 = (280.80237m);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            Fp3 a1 = Fp3(-299.5752m, 27.947937m, 309.77936m);
            Fp b1 = (336.64435m);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            Fp3 a2 = Fp3(-82.85208m, -192.66446m, 440.7932m);
            Fp b2 = (150.21582m);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            Fp3 a3 = Fp3(-389.2873m, 247.63269m, 90.41724m);
            Fp b3 = (-329.5147m);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void Fp3_operator_equal_scalar_wide()
        {
            Fp a0 = (-193.7709m);
            Fp3 b0 = Fp3(-138.46414m, -273.42194m, 162.6225m);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            Fp a1 = (187.72485m);
            Fp3 b1 = Fp3(382.61987m, -82.54779m, 298.32867m);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            Fp a2 = (-235.21484m);
            Fp3 b2 = Fp3(125.953125m, -18.586182m, -251.19241m);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            Fp a3 = (-295.58725m);
            Fp3 b3 = Fp3(-402.58438m, 258.1311m, -128.23999m);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [Test]
        public static void Fp3_operator_not_equal_wide_wide()
        {
            Fp3 a0 = Fp3(-498.66064m, 483.43823m, -368.5275m);
            Fp3 b0 = Fp3(496.85205m, 490.64667m, -360.57568m);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            Fp3 a1 = Fp3(-1.0883789m, -338.3922m, 405.47144m);
            Fp3 b1 = Fp3(-70.759705m, -336.28644m, 308.89386m);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            Fp3 a2 = Fp3(-431.94257m, -256.16473m, 431.58868m);
            Fp3 b2 = Fp3(-222.3328m, 60.620728m, 234.66309m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            Fp3 a3 = Fp3(-181.17221m, -231.57767m, 338.64343m);
            Fp3 b3 = Fp3(-55.329132m, -350.50763m, 419.24213m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void Fp3_operator_not_equal_wide_scalar()
        {
            Fp3 a0 = Fp3(-491.50952m, 506.73987m, -201.46179m);
            Fp b0 = (-40.51297m);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            Fp3 a1 = Fp3(458.7696m, -178.72217m, -4.25885m);
            Fp b1 = (-47.28424m);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            Fp3 a2 = Fp3(-480.9433m, 203.23236m, 178.6864m);
            Fp b2 = (380.7296m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            Fp3 a3 = Fp3(-210.24811m, 307.94647m, -204.93494m);
            Fp b3 = (149.29901m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void Fp3_operator_not_equal_scalar_wide()
        {
            Fp a0 = (-84.47537m);
            Fp3 b0 = Fp3(145.24762m, -294.39984m, -501.69632m);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            Fp a1 = (-231.25659m);
            Fp3 b1 = Fp3(-315.36432m, -83.16135m, -131.2561m);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            Fp a2 = (504.67365m);
            Fp3 b2 = Fp3(-449.54895m, -457.44342m, -376.26813m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            Fp a3 = (-385.2497m);
            Fp3 b3 = Fp3(425.68658m, -18.988708m, -334.19855m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [Test]
        public static void Fp3_operator_less_wide_wide()
        {
            Fp3 a0 = Fp3(-248.45181m, -455.30365m, 320.315m);
            Fp3 b0 = Fp3(225.04071m, 307.312m, -435.28625m);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(a0 < b0, r0);

            Fp3 a1 = Fp3(-270.12848m, -52.971436m, 351.49738m);
            Fp3 b1 = Fp3(384.59454m, 128.18854m, 25.515686m);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(a1 < b1, r1);

            Fp3 a2 = Fp3(-189.24158m, 166.60394m, -281.60788m);
            Fp3 b2 = Fp3(253.86078m, -402.4974m, 39.97223m);
            bool3 r2 = bool3(true, false, true);
            TestUtils.AreEqual(a2 < b2, r2);

            Fp3 a3 = Fp3(-328.3689m, 303.74066m, -10.85434m);
            Fp3 b3 = Fp3(-195.34567m, 480.38788m, 430.75067m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [Test]
        public static void Fp3_operator_less_wide_scalar()
        {
            Fp3 a0 = Fp3(-217.34143m, -154.63306m, -189.59198m);
            Fp b0 = (-277.67377m);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(a0 < b0, r0);

            Fp3 a1 = Fp3(-383.10138m, -495.594m, 339.89673m);
            Fp b1 = (449.96143m);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(a1 < b1, r1);

            Fp3 a2 = Fp3(278.93567m, 168.98419m, -379.16406m);
            Fp b2 = (448.09546m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            Fp3 a3 = Fp3(231.91278m, -42.53656m, 3.5787964m);
            Fp b3 = (191.04297m);
            bool3 r3 = bool3(false, true, true);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [Test]
        public static void Fp3_operator_less_scalar_wide()
        {
            Fp a0 = (-485.6832m);
            Fp3 b0 = Fp3(-362.635m, -4.044037m, 131.79993m);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(a0 < b0, r0);

            Fp a1 = (413.48376m);
            Fp3 b1 = Fp3(382.34747m, 55.00757m, -373.25812m);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(a1 < b1, r1);

            Fp a2 = (-144.24112m);
            Fp3 b2 = Fp3(-243.22845m, 212.25671m, 71.16406m);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            Fp a3 = (-104.41278m);
            Fp3 b3 = Fp3(177.30798m, -44.35016m, -280.36896m);
            bool3 r3 = bool3(true, true, false);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [Test]
        public static void Fp3_operator_greater_wide_wide()
        {
            Fp3 a0 = Fp3(-241.33841m, -475.21497m, -39.85724m);
            Fp3 b0 = Fp3(438.91602m, 228.49042m, -206.5971m);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(a0 > b0, r0);

            Fp3 a1 = Fp3(-167.34067m, -383.31873m, 119.09595m);
            Fp3 b1 = Fp3(366.85388m, 35.72583m, -91.07013m);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(a1 > b1, r1);

            Fp3 a2 = Fp3(134.24622m, 295.21844m, -324.31348m);
            Fp3 b2 = Fp3(154.46704m, 467.31146m, -304.5686m);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(a2 > b2, r2);

            Fp3 a3 = Fp3(278.55414m, -216.29721m, -217.02304m);
            Fp3 b3 = Fp3(-105.56061m, 118.17328m, 291.72064m);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [Test]
        public static void Fp3_operator_greater_wide_scalar()
        {
            Fp3 a0 = Fp3(-348.3178m, -2.4205933m, 423.71265m);
            Fp b0 = (239.55536m);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(a0 > b0, r0);

            Fp3 a1 = Fp3(250.03534m, -121.415405m, 202.20648m);
            Fp b1 = (-209.6311m);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(a1 > b1, r1);

            Fp3 a2 = Fp3(420.89746m, -299.2479m, -84.361145m);
            Fp b2 = (422.2362m);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(a2 > b2, r2);

            Fp3 a3 = Fp3(17.824524m, 501.89423m, -436.39563m);
            Fp b3 = (509.54065m);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [Test]
        public static void Fp3_operator_greater_scalar_wide()
        {
            Fp a0 = (-34.200226m);
            Fp3 b0 = Fp3(212.36633m, 82.05115m, 458.8661m);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(a0 > b0, r0);

            Fp a1 = (136.99329m);
            Fp3 b1 = Fp3(227.5271m, 495.51807m, -142.25m);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(a1 > b1, r1);

            Fp a2 = (-196.3866m);
            Fp3 b2 = Fp3(-97.57742m, -241.31299m, -139.42554m);
            bool3 r2 = bool3(false, true, false);
            TestUtils.AreEqual(a2 > b2, r2);

            Fp a3 = (305.07654m);
            Fp3 b3 = Fp3(-305.36148m, -506.0047m, -429.6786m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [Test]
        public static void Fp3_operator_less_equal_wide_wide()
        {
            Fp3 a0 = Fp3(-266.1326m, -124.733765m, -292.27527m);
            Fp3 b0 = Fp3(-192.43298m, -372.29657m, -239.20337m);
            bool3 r0 = bool3(true, false, true);
            TestUtils.AreEqual(a0 <= b0, r0);

            Fp3 a1 = Fp3(24.822144m, -272.5923m, -285.86377m);
            Fp3 b1 = Fp3(-314.14038m, 439.8761m, 301.66156m);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(a1 <= b1, r1);

            Fp3 a2 = Fp3(384.44617m, 267.29004m, 478.6623m);
            Fp3 b2 = Fp3(257.67798m, -234.71451m, -127.03546m);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(a2 <= b2, r2);

            Fp3 a3 = Fp3(-110.5802m, 109.78064m, 178.77972m);
            Fp3 b3 = Fp3(-511.36487m, -384.00253m, 8.338257m);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [Test]
        public static void Fp3_operator_less_equal_wide_scalar()
        {
            Fp3 a0 = Fp3(-347.2307m, 357.8626m, -179.71185m);
            Fp b0 = (-160.18707m);
            bool3 r0 = bool3(true, false, true);
            TestUtils.AreEqual(a0 <= b0, r0);

            Fp3 a1 = Fp3(-320.96027m, -314.84348m, 219.6524m);
            Fp b1 = (26.583496m);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(a1 <= b1, r1);

            Fp3 a2 = Fp3(479.43463m, 94.45245m, 508.216m);
            Fp b2 = (166.25684m);
            bool3 r2 = bool3(false, true, false);
            TestUtils.AreEqual(a2 <= b2, r2);

            Fp3 a3 = Fp3(43.63623m, -351.45435m, -510.48376m);
            Fp b3 = (213.9112m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [Test]
        public static void Fp3_operator_less_equal_scalar_wide()
        {
            Fp a0 = (-187.50052m);
            Fp3 b0 = Fp3(177.5221m, -221.34222m, -35.76126m);
            bool3 r0 = bool3(true, false, true);
            TestUtils.AreEqual(a0 <= b0, r0);

            Fp a1 = (354.90814m);
            Fp3 b1 = Fp3(297.5418m, -487.66107m, 217.42084m);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(a1 <= b1, r1);

            Fp a2 = (-94.54605m);
            Fp3 b2 = Fp3(283.79358m, 431.82996m, -8.173676m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 <= b2, r2);

            Fp a3 = (456.12714m);
            Fp3 b3 = Fp3(-499.4815m, -282.17194m, -207.38339m);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [Test]
        public static void Fp3_operator_greater_equal_wide_wide()
        {
            Fp3 a0 = Fp3(-480.5502m, -331.65723m, -467.8819m);
            Fp3 b0 = Fp3(-13.955231m, -36.309723m, -361.51007m);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            Fp3 a1 = Fp3(-426.36612m, 130.68m, 397.9231m);
            Fp3 b1 = Fp3(-270.75452m, -221.99017m, 153.435m);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(a1 >= b1, r1);

            Fp3 a2 = Fp3(318.48987m, -65.386536m, 356.61475m);
            Fp3 b2 = Fp3(90.831665m, -417.45892m, 251.08832m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 >= b2, r2);

            Fp3 a3 = Fp3(435.95337m, -488.66916m, 131.80145m);
            Fp3 b3 = Fp3(137.00128m, -407.28433m, 228.05487m);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [Test]
        public static void Fp3_operator_greater_equal_wide_scalar()
        {
            Fp3 a0 = Fp3(-100.195435m, 360.16846m, -374.34125m);
            Fp b0 = (71.966736m);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            Fp3 a1 = Fp3(242.43842m, 155.94312m, -314.72128m);
            Fp b1 = (-297.3426m);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(a1 >= b1, r1);

            Fp3 a2 = Fp3(91.45465m, -388.12286m, -277.31842m);
            Fp b2 = (-222.22919m);
            bool3 r2 = bool3(true, false, false);
            TestUtils.AreEqual(a2 >= b2, r2);

            Fp3 a3 = Fp3(428.42255m, -383.9345m, 287.05243m);
            Fp b3 = (321.47345m);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [Test]
        public static void Fp3_operator_greater_equal_scalar_wide()
        {
            Fp a0 = (66.15973m);
            Fp3 b0 = Fp3(228.81372m, -371.95468m, 184.22943m);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            Fp a1 = (266.50446m);
            Fp3 b1 = Fp3(225.0069m, -488.35345m, -52.242126m);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(a1 >= b1, r1);

            Fp a2 = (451.52258m);
            Fp3 b2 = Fp3(52.532227m, 45.85956m, -379.48004m);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(a2 >= b2, r2);

            Fp a3 = (401.27222m);
            Fp3 b3 = Fp3(172.98633m, 370.27435m, 192.75183m);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [Test]
        public static void Fp3_operator_add_wide_wide()
        {
            Fp3 a0 = Fp3(149.59412m, 261.85114m, 134.76111m);
            Fp3 b0 = Fp3(82.11688m, -336.5427m, -203.66907m);
            Fp3 r0 = Fp3(231.711m, -74.69156m, -68.90796m);
            TestUtils.AreEqual(a0 + b0, r0);

            Fp3 a1 = Fp3(296.27722m, -87.83832m, 262.9261m);
            Fp3 b1 = Fp3(348.16364m, 417.2708m, 96.18884m);
            Fp3 r1 = Fp3(644.44086m, 329.4325m, 359.11493m);
            TestUtils.AreEqual(a1 + b1, r1);

            Fp3 a2 = Fp3(-230.0998m, -408.89618m, -478.518m);
            Fp3 b2 = Fp3(-128.52588m, 215.17627m, 292.04285m);
            Fp3 r2 = Fp3(-358.62567m, -193.71991m, -186.47516m);
            TestUtils.AreEqual(a2 + b2, r2);

            Fp3 a3 = Fp3(195.41254m, -321.6739m, 350.58875m);
            Fp3 b3 = Fp3(113.43524m, 155.31805m, -440.69635m);
            Fp3 r3 = Fp3(308.84778m, -166.35583m, -90.107605m);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [Test]
        public static void Fp3_operator_add_wide_scalar()
        {
            Fp3 a0 = Fp3(-363.30127m, 85.21643m, 307.5595m);
            Fp b0 = (84.48932m);
            Fp3 r0 = Fp3(-278.81195m, 169.70575m, 392.04883m);
            TestUtils.AreEqual(a0 + b0, r0);

            Fp3 a1 = Fp3(-324.80725m, 85.79199m, -287.34515m);
            Fp b1 = (213.70538m);
            Fp3 r1 = Fp3(-111.10187m, 299.49738m, -73.63977m);
            TestUtils.AreEqual(a1 + b1, r1);

            Fp3 a2 = Fp3(389.57996m, 286.0359m, -410.64044m);
            Fp b2 = (474.44275m);
            Fp3 r2 = Fp3(864.0227m, 760.47864m, 63.802307m);
            TestUtils.AreEqual(a2 + b2, r2);

            Fp3 a3 = Fp3(-86.13693m, 222.11395m, 192.88623m);
            Fp b3 = (429.21674m);
            Fp3 r3 = Fp3(343.0798m, 651.3307m, 622.10297m);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [Test]
        public static void Fp3_operator_add_scalar_wide()
        {
            Fp a0 = (-510.89264m);
            Fp3 b0 = Fp3(130.32959m, 272.09174m, 331.812m);
            Fp3 r0 = Fp3(-380.56305m, -238.8009m, -179.08063m);
            TestUtils.AreEqual(a0 + b0, r0);

            Fp a1 = (-379.09714m);
            Fp3 b1 = Fp3(397.8896m, -333.4043m, -9.8524475m);
            Fp3 r1 = Fp3(18.79245m, -712.50146m, -388.9496m);
            TestUtils.AreEqual(a1 + b1, r1);

            Fp a2 = (236.39392m);
            Fp3 b2 = Fp3(-45.938232m, -418.6372m, -504.4516m);
            Fp3 r2 = Fp3(190.45569m, -182.24329m, -268.05768m);
            TestUtils.AreEqual(a2 + b2, r2);

            Fp a3 = (474.44263m);
            Fp3 b3 = Fp3(-500.95m, -202.51782m, -32.80835m);
            Fp3 r3 = Fp3(-26.507385m, 271.9248m, 441.63428m);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [Test]
        public static void Fp3_operator_sub_wide_wide()
        {
            Fp3 a0 = Fp3(-493.45367m, -228.40881m, 463.7627m);
            Fp3 b0 = Fp3(-470.96182m, 95.77942m, 189.22583m);
            Fp3 r0 = Fp3(-22.491852m, -324.18823m, 274.53687m);
            TestUtils.AreEqual(a0 - b0, r0);

            Fp3 a1 = Fp3(280.9309m, -394.85977m, -289.75592m);
            Fp3 b1 = Fp3(-88.87137m, -353.6308m, -352.10352m);
            Fp3 r1 = Fp3(369.80228m, -41.228973m, 62.347595m);
            TestUtils.AreEqual(a1 - b1, r1);

            Fp3 a2 = Fp3(248.1676m, 499.35565m, -272.3052m);
            Fp3 b2 = Fp3(346.07532m, -379.2524m, -63.3519m);
            Fp3 r2 = Fp3(-97.907715m, 878.60803m, -208.95331m);
            TestUtils.AreEqual(a2 - b2, r2);

            Fp3 a3 = Fp3(-342.8852m, 328.01593m, -486.20126m);
            Fp3 b3 = Fp3(326.07965m, 57.516968m, -5.383026m);
            Fp3 r3 = Fp3(-668.96484m, 270.49896m, -480.81824m);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [Test]
        public static void Fp3_operator_sub_wide_scalar()
        {
            Fp3 a0 = Fp3(-483.1618m, 208.13171m, -387.3754m);
            Fp b0 = (-369.26047m);
            Fp3 r0 = Fp3(-113.90134m, 577.3922m, -18.11493m);
            TestUtils.AreEqual(a0 - b0, r0);

            Fp3 a1 = Fp3(-336.09125m, -376.95837m, 348.0346m);
            Fp b1 = (167.81488m);
            Fp3 r1 = Fp3(-503.90613m, -544.77325m, 180.21973m);
            TestUtils.AreEqual(a1 - b1, r1);

            Fp3 a2 = Fp3(-303.7441m, 276.68842m, -357.72092m);
            Fp b2 = (237.17828m);
            Fp3 r2 = Fp3(-540.92236m, 39.51013m, -594.8992m);
            TestUtils.AreEqual(a2 - b2, r2);

            Fp3 a3 = Fp3(308.1668m, 246.66418m, -157.99301m);
            Fp b3 = (243.65826m);
            Fp3 r3 = Fp3(64.508545m, 3.0059204m, -401.65128m);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [Test]
        public static void Fp3_operator_sub_scalar_wide()
        {
            Fp a0 = (-400.4135m);
            Fp3 b0 = Fp3(-434.79865m, -476.15903m, 360.5266m);
            Fp3 r0 = Fp3(34.38513m, 75.745514m, -760.9401m);
            TestUtils.AreEqual(a0 - b0, r0);

            Fp a1 = (427.36743m);
            Fp3 b1 = Fp3(34.250977m, -102.27759m, -235.2923m);
            Fp3 r1 = Fp3(393.11646m, 529.645m, 662.6597m);
            TestUtils.AreEqual(a1 - b1, r1);

            Fp a2 = (-404.2934m);
            Fp3 b2 = Fp3(53.207886m, -349.06525m, 180.38147m);
            Fp3 r2 = Fp3(-457.50128m, -55.22815m, -584.67487m);
            TestUtils.AreEqual(a2 - b2, r2);

            Fp a3 = (508.37018m);
            Fp3 b3 = Fp3(59.979797m, 278.88702m, 184.60626m);
            Fp3 r3 = Fp3(448.39038m, 229.48315m, 323.76392m);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [Test]
        public static void Fp3_operator_mul_wide_wide()
        {
            Fp3 a0 = Fp3(-326.98944m, 183.26929m, -95.33392m);
            Fp3 b0 = Fp3(351.58496m, 113.25659m, 286.7157m);
            Fp3 r0 = Fp3(-114964.57m, 20756.455m, -27333.732m);
            TestUtils.AreEqual(a0 * b0, r0, Fp.Point1);

            Fp3 a1 = Fp3(-352.96515m, -222.24484m, 237.92462m);
            Fp3 b1 = Fp3(288.06653m, 327.3562m, 406.58655m);
            Fp3 r1 = Fp3(-101677.445m, -72753.23m, 96736.95m);
            TestUtils.AreEqual(a1 * b1, r1, Fp.Point1);

            Fp3 a2 = Fp3(-66.21646m, -462.0301m, -500.88995m);
            Fp3 b2 = Fp3(-200.43045m, 386.18604m, 363.50323m);
            Fp3 r2 = Fp3(13271.795m, -178429.56m, -182075.12m);
            TestUtils.AreEqual(a2 * b2, r2, Fp.Point1);

            Fp3 a3 = Fp3(435.0948m, 252.29065m, -6.518158m);
            Fp3 b3 = Fp3(324.0984m, 356.03528m, -241.42923m);
            Fp3 r3 = Fp3(141013.52m, 89824.375m, 1573.6738m);
            TestUtils.AreEqual(a3 * b3, r3, Fp.Point1);
        }

        [Test]
        public static void Fp3_operator_mul_wide_scalar()
        {
            Fp3 a0 = Fp3(398.63098m, 133.9815m, 100.58301m);
            Fp b0 = (188.26575m);
            Fp3 r0 = Fp3(75048.56m, 25224.129m, 18936.336m);
            TestUtils.AreEqual(a0 * b0, r0, Fp.Point1);

            Fp3 a1 = Fp3(289.0614m, -440.14893m, 265.87543m);
            Fp b1 = (-66.26727m);
            Fp3 r1 = Fp3(-19155.31m, 29167.469m, -17618.84m);
            TestUtils.AreEqual(a1 * b1, r1, Fp.Point1);

            Fp3 a2 = Fp3(258.4983m, 338.4347m, -313.44278m);
            Fp b2 = (-59.58963m);
            Fp3 r2 = Fp3(-15403.817m, -20167.197m, 18677.94m);
            TestUtils.AreEqual(a2 * b2, r2, Fp.Point1);

            Fp3 a3 = Fp3(-256.9532m, -297.26385m, 206.87476m);
            Fp b3 = (383.3626m);
            Fp3 r3 = Fp3(-98506.24m, -113959.84m, 79308.05m);
            TestUtils.AreEqual(a3 * b3, r3, Fp.Point1);
        }

        [Test]
        public static void Fp3_operator_mul_scalar_wide()
        {
            Fp a0 = (291.10083m);
            Fp3 b0 = Fp3(85.88977m, -2.0483398m, -372.21533m);
            Fp3 r0 = Fp3(25002.584m, -596.27344m, -108352.195m);
            TestUtils.AreEqual(a0 * b0, r0, Fp.Point1);

            Fp a1 = (-32.73163m);
            Fp3 b1 = Fp3(-458.91272m, -425.4938m, 127.91998m);
            Fp3 r1 = Fp3(15020.961m, 13927.105m, -4187.0293m);
            TestUtils.AreEqual(a1 * b1, r1, Fp.Point1);

            Fp a2 = (166.95068m);
            Fp3 b2 = Fp3(-505.2238m, -52.959717m, 493.21753m);
            Fp3 r2 = Fp3(-84347.45m, -8841.661m, 82343m);
            TestUtils.AreEqual(a2 * b2, r2, Fp.Point1);

            Fp a3 = (-320.13397m);
            Fp3 b3 = Fp3(459.70593m, -309.70544m, -463.31314m);
            Fp3 r3 = Fp3(-147167.48m, 99147.234m, 148322.28m);
            TestUtils.AreEqual(a3 * b3, r3, Fp.Point1);
        }

        [Test]
        public static void Fp3_operator_div_wide_wide()
        {
            Fp3 a0 = Fp3(-434.30182m, -58.547546m, -242.22162m);
            Fp3 b0 = Fp3(-418.87305m, 154.74506m, 228.1217m);
            Fp3 r0 = Fp3(1.036834m, -0.3783484m, -1.0618087m);
            TestUtils.AreEqual(a0 / b0, r0);

            Fp3 a1 = Fp3(-61.09958m, 507.04565m, 55.52173m);
            Fp3 b1 = Fp3(170.04639m, -183.44586m, 254.94373m);
            Fp3 r1 = Fp3(-0.35931125m, -2.764007m, 0.21778034m);
            TestUtils.AreEqual(a1 / b1, r1);

            Fp3 a2 = Fp3(84.16864m, 121.1817m, -251.65366m);
            Fp3 b2 = Fp3(-327.2115m, -54.62494m, 345.10803m);
            Fp3 r2 = Fp3(-0.2572301m, -2.2184317m, -0.72920257m);
            TestUtils.AreEqual(a2 / b2, r2);

            Fp3 a3 = Fp3(232.27637m, -11.3958435m, 29.057007m);
            Fp3 b3 = Fp3(82.34033m, -104.82977m, -236.51917m);
            Fp3 r3 = Fp3(2.8209307m, 0.10870808m, -0.12285265m);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [Test]
        public static void Fp3_operator_div_wide_scalar()
        {
            Fp3 a0 = Fp3(338.5183m, 342.57233m, -162.55743m);
            Fp b0 = (18.585693m);
            Fp3 r0 = Fp3(18.213919m, 18.432045m, -8.746374m);
            TestUtils.AreEqual(a0 / b0, r0);

            Fp3 a1 = Fp3(62.311157m, 124.90289m, 336.1009m);
            Fp b1 = (-435.44455m);
            Fp3 r1 = Fp3(-0.1430978m, -0.28683996m, -0.7718569m);
            TestUtils.AreEqual(a1 / b1, r1);

            Fp3 a2 = Fp3(-230.52808m, -125.544495m, -412.19177m);
            Fp b2 = (-93.8689m);
            Fp3 r2 = Fp3(2.4558516m, 1.3374451m, 4.3911433m);
            TestUtils.AreEqual(a2 / b2, r2);

            Fp3 a3 = Fp3(-377.6493m, -439.82245m, -253.62341m);
            Fp b3 = (-358.36334m);
            Fp3 r3 = Fp3(1.0538168m, 1.2273088m, 0.707727m);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [Test]
        public static void Fp3_operator_div_scalar_wide()
        {
            Fp a0 = (2.9528809m);
            Fp3 b0 = Fp3(260.17004m, 427.25922m, -21.09494m);
            Fp3 r0 = Fp3(0.011349811m, 0.0069112163m, -0.13998052m);
            TestUtils.AreEqual(a0 / b0, r0);

            Fp a1 = (-20.552216m);
            Fp3 b1 = Fp3(-133.13852m, 254.63452m, -286.85498m);
            Fp3 r1 = Fp3(0.15436716m, -0.0807126m, 0.07164671m);
            TestUtils.AreEqual(a1 / b1, r1);

            Fp a2 = (186.54468m);
            Fp3 b2 = Fp3(172.25421m, -81.20044m, 483.28802m);
            Fp3 r2 = Fp3(1.0829614m, -2.2973359m, 0.38599068m);
            TestUtils.AreEqual(a2 / b2, r2);

            Fp a3 = (492.59583m);
            Fp3 b3 = Fp3(-428.58005m, -63.68457m, 464.9878m);
            Fp3 r3 = Fp3(-1.1493671m, -7.734932m, 1.0593736m);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [Test]
        public static void Fp3_operator_mod_wide_wide()
        {
            Fp3 a0 = Fp3(56.91992m, -262.2188m, -97.763245m);
            Fp3 b0 = Fp3(470.2685m, -371.4406m, 161.94507m);
            Fp3 r0 = Fp3(56.91992m, -262.2188m, -97.763245m);
            TestUtils.AreEqual(a0 % b0, r0);

            Fp3 a1 = Fp3(104.89154m, -65.37125m, -126.50305m);
            Fp3 b1 = Fp3(-151.37039m, 170.21747m, 453.35284m);
            Fp3 r1 = Fp3(104.89154m, -65.37125m, -126.50305m);
            TestUtils.AreEqual(a1 % b1, r1);

            Fp3 a2 = Fp3(-385.32135m, 75.61359m, 147.87054m);
            Fp3 b2 = Fp3(433.15808m, -159.1189m, 190.11346m);
            Fp3 r2 = Fp3(-385.32135m, 75.61359m, 147.87054m);
            TestUtils.AreEqual(a2 % b2, r2);

            Fp3 a3 = Fp3(-146.02231m, -188.04791m, 14.303833m);
            Fp3 b3 = Fp3(46.63446m, 297.8944m, -198.62778m);
            Fp3 r3 = Fp3(-6.118927m, -188.04791m, 14.303833m);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [Test]
        public static void Fp3_operator_mod_wide_scalar()
        {
            Fp3 a0 = Fp3(360.08112m, 57.401245m, -85.35019m);
            Fp b0 = (-297.3982m);
            Fp3 r0 = Fp3(62.682922m, 57.401245m, -85.35019m);
            TestUtils.AreEqual(a0 % b0, r0);

            Fp3 a1 = Fp3(449.2752m, 469.19336m, -152.73862m);
            Fp b1 = (4.46344m);
            Fp3 r1 = Fp3(2.9312134m, 0.5321655m, -0.98165894m);
            TestUtils.AreEqual(a1 % b1, r1);

            Fp3 a2 = Fp3(262.32312m, -242.91284m, -24.107025m);
            Fp b2 = (279.7296m);
            Fp3 r2 = Fp3(262.32312m, -242.91284m, -24.107025m);
            TestUtils.AreEqual(a2 % b2, r2);

            Fp3 a3 = Fp3(109.5332m, 357.42072m, 510.55994m);
            Fp b3 = (-276.18713m);
            Fp3 r3 = Fp3(109.5332m, 81.23358m, 234.3728m);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [Test]
        public static void Fp3_operator_mod_scalar_wide()
        {
            Fp a0 = (321.83087m);
            Fp3 b0 = Fp3(-360.08008m, 271.34174m, -418.93903m);
            Fp3 r0 = Fp3(321.83087m, 50.489136m, 321.83087m);
            TestUtils.AreEqual(a0 % b0, r0);

            Fp a1 = (-57.065247m);
            Fp3 b1 = Fp3(-18.80716m, 10.327942m, 114.91266m);
            Fp3 r1 = Fp3(-0.6437683m, -5.425537m, -57.065247m);
            TestUtils.AreEqual(a1 % b1, r1);

            Fp a2 = (-373.9153m);
            Fp3 b2 = Fp3(-178.94406m, 11.08252m, -162.6925m);
            Fp3 r2 = Fp3(-16.027191m, -8.192169m, -48.530304m);
            TestUtils.AreEqual(a2 % b2, r2);

            Fp a3 = (118.41644m);
            Fp3 b3 = Fp3(-13.732086m, -58.26706m, 219.90881m);
            Fp3 r3 = Fp3(8.559753m, 1.8823242m, 118.41644m);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [Test]
        public static void Fp3_operator_plus()
        {
            Fp3 a0 = Fp3(-462.95068m, -341.85828m, 350.2633m);
            Fp3 r0 = Fp3(-462.95068m, -341.85828m, 350.2633m);
            TestUtils.AreEqual(+a0, r0);

            Fp3 a1 = Fp3(-306.49417m, -325.1939m, 298.37836m);
            Fp3 r1 = Fp3(-306.49417m, -325.1939m, 298.37836m);
            TestUtils.AreEqual(+a1, r1);

            Fp3 a2 = Fp3(256.47144m, -323.4687m, 500.9478m);
            Fp3 r2 = Fp3(256.47144m, -323.4687m, 500.9478m);
            TestUtils.AreEqual(+a2, r2);

            Fp3 a3 = Fp3(-509.95538m, -382.86426m, 322.83105m);
            Fp3 r3 = Fp3(-509.95538m, -382.86426m, 322.83105m);
            TestUtils.AreEqual(+a3, r3);
        }

        [Test]
        public static void Fp3_operator_neg()
        {
            Fp3 a0 = Fp3(-161.17307m, 91.577576m, -474.2732m);
            Fp3 r0 = Fp3(161.17307m, -91.577576m, 474.2732m);
            TestUtils.AreEqual(-a0, r0);

            Fp3 a1 = Fp3(-138.7461m, 428.21216m, 440.5053m);
            Fp3 r1 = Fp3(138.7461m, -428.21216m, -440.5053m);
            TestUtils.AreEqual(-a1, r1);

            Fp3 a2 = Fp3(-457.04636m, -126.07272m, 62.18921m);
            Fp3 r2 = Fp3(457.04636m, 126.07272m, -62.18921m);
            TestUtils.AreEqual(-a2, r2);

            Fp3 a3 = Fp3(176.51025m, -161.73965m, -413.31476m);
            Fp3 r3 = Fp3(-176.51025m, 161.73965m, 413.31476m);
            TestUtils.AreEqual(-a3, r3);
        }

        [Test]
        public static void Fp3_operator_prefix_inc()
        {
            Fp3 a0 = Fp3(-283.03375m, 366.7337m, -401.91684m);
            Fp3 r0 = Fp3(-282.03375m, 367.7337m, -400.91684m);
            TestUtils.AreEqual(++a0, r0);

            Fp3 a1 = Fp3(187.16315m, 130.98157m, -495.23444m);
            Fp3 r1 = Fp3(188.16315m, 131.98157m, -494.23444m);
            TestUtils.AreEqual(++a1, r1);

            Fp3 a2 = Fp3(224.36108m, -308.8134m, 28.987854m);
            Fp3 r2 = Fp3(225.36108m, -307.8134m, 29.987854m);
            TestUtils.AreEqual(++a2, r2);

            Fp3 a3 = Fp3(-483.0141m, -40.76111m, 21.258972m);
            Fp3 r3 = Fp3(-482.0141m, -39.76111m, 22.258972m);
            TestUtils.AreEqual(++a3, r3);
        }

        [Test]
        public static void Fp3_operator_postfix_inc()
        {
            Fp3 a0 = Fp3(366.14648m, 179.27643m, -389.90704m);
            Fp3 r0 = Fp3(366.14648m, 179.27643m, -389.90704m);
            TestUtils.AreEqual(a0++, r0);

            Fp3 a1 = Fp3(183.24811m, -110.858795m, 145.12164m);
            Fp3 r1 = Fp3(183.24811m, -110.858795m, 145.12164m);
            TestUtils.AreEqual(a1++, r1);

            Fp3 a2 = Fp3(-225.01251m, 435.95538m, -219.50537m);
            Fp3 r2 = Fp3(-225.01251m, 435.95538m, -219.50537m);
            TestUtils.AreEqual(a2++, r2);

            Fp3 a3 = Fp3(-302.35114m, -432.4173m, -195.24594m);
            Fp3 r3 = Fp3(-302.35114m, -432.4173m, -195.24594m);
            TestUtils.AreEqual(a3++, r3);
        }

        [Test]
        public static void Fp3_operator_prefix_dec()
        {
            Fp3 a0 = Fp3(127.71149m, 412.1825m, 421.8966m);
            Fp3 r0 = Fp3(126.71149m, 411.1825m, 420.8966m);
            TestUtils.AreEqual(--a0, r0);

            Fp3 a1 = Fp3(-407.7751m, -202.65967m, -365.90997m);
            Fp3 r1 = Fp3(-408.7751m, -203.65967m, -366.90997m);
            TestUtils.AreEqual(--a1, r1);

            Fp3 a2 = Fp3(111.1109m, -278.87814m, 49.586304m);
            Fp3 r2 = Fp3(110.1109m, -279.87814m, 48.586304m);
            TestUtils.AreEqual(--a2, r2);

            Fp3 a3 = Fp3(-490.94742m, 440.35724m, -22.001892m);
            Fp3 r3 = Fp3(-491.94742m, 439.35724m, -23.001892m);
            TestUtils.AreEqual(--a3, r3);
        }

        [Test]
        public static void Fp3_operator_postfix_dec()
        {
            Fp3 a0 = Fp3(333.3805m, -215.50674m, 152.04675m);
            Fp3 r0 = Fp3(333.3805m, -215.50674m, 152.04675m);
            TestUtils.AreEqual(a0--, r0);

            Fp3 a1 = Fp3(-233.58646m, 39.012817m, 106.726135m);
            Fp3 r1 = Fp3(-233.58646m, 39.012817m, 106.726135m);
            TestUtils.AreEqual(a1--, r1);

            Fp3 a2 = Fp3(-494.1874m, 474.02826m, -498.21182m);
            Fp3 r2 = Fp3(-494.1874m, 474.02826m, -498.21182m);
            TestUtils.AreEqual(a2--, r2);

            Fp3 a3 = Fp3(-259.07544m, 256.4026m, 272.2155m);
            Fp3 r3 = Fp3(-259.07544m, 256.4026m, 272.2155m);
            TestUtils.AreEqual(a3--, r3);
        }

        [Test]
        public static void Fp3_shuffle_result_1()
        {
            Fp3 a = Fp3(0, 1, 2);
            Fp3 b = Fp3(3, 4, 5);

            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftX), (0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY), (1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ), (2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX), (3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY), (4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ), (5));
        }

        [Test]
        public static void Fp3_shuffle_result_2()
        {
            Fp3 a = Fp3(0, 1, 2);
            Fp3 b = Fp3(3, 4, 5);

            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightY), Fp2(4, 4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightX), Fp2(4, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.RightX), Fp2(1, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.LeftZ), Fp2(5, 2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.LeftY), Fp2(5, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.LeftZ), Fp2(1, 2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX, ShuffleComponent.LeftZ), Fp2(3, 2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.LeftX), Fp2(5, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.RightZ), Fp2(5, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftY), Fp2(4, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightZ), Fp2(4, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.LeftX), Fp2(5, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightX), Fp2(4, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.RightY), Fp2(5, 4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX, ShuffleComponent.LeftX), Fp2(3, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.LeftZ), Fp2(1, 2));
        }

        [Test]
        public static void Fp3_shuffle_result_3()
        {
            Fp3 a = Fp3(0, 1, 2);
            Fp3 b = Fp3(3, 4, 5);

            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.RightZ, ShuffleComponent.RightX), Fp3(1, 5, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftX, ShuffleComponent.LeftZ), Fp3(4, 0, 2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.RightZ, ShuffleComponent.RightX), Fp3(2, 5, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftX, ShuffleComponent.LeftY), Fp3(4, 0, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.RightY, ShuffleComponent.LeftZ), Fp3(5, 4, 2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.LeftX, ShuffleComponent.LeftY), Fp3(2, 0, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.RightY, ShuffleComponent.RightX), Fp3(2, 4, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.LeftY, ShuffleComponent.RightZ), Fp3(2, 1, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightY, ShuffleComponent.RightZ), Fp3(4, 4, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightX, ShuffleComponent.LeftY), Fp3(4, 3, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.RightZ, ShuffleComponent.LeftX), Fp3(5, 5, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.LeftY, ShuffleComponent.RightX), Fp3(5, 1, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftY, ShuffleComponent.RightZ), Fp3(4, 1, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.RightX, ShuffleComponent.RightY), Fp3(2, 3, 4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftX, ShuffleComponent.RightY), Fp3(4, 0, 4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftX, ShuffleComponent.RightZ), Fp3(4, 0, 5));
        }

        [Test]
        public static void Fp3_shuffle_result_4()
        {
            Fp3 a = Fp3(0, 1, 2);
            Fp3 b = Fp3(3, 4, 5);

            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.LeftZ, ShuffleComponent.RightX, ShuffleComponent.LeftY), Fp4(1, 2, 3, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftZ, ShuffleComponent.RightZ, ShuffleComponent.RightY), Fp4(4, 2, 5, 4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightY, ShuffleComponent.RightZ, ShuffleComponent.LeftY), Fp4(4, 4, 5, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX, ShuffleComponent.RightX, ShuffleComponent.LeftY, ShuffleComponent.LeftY), Fp4(3, 3, 1, 1));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftY, ShuffleComponent.LeftY, ShuffleComponent.LeftX), Fp4(4, 1, 1, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX, ShuffleComponent.RightY, ShuffleComponent.RightX, ShuffleComponent.RightZ), Fp4(3, 4, 3, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.RightZ, ShuffleComponent.LeftX, ShuffleComponent.RightZ), Fp4(1, 5, 0, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.LeftX, ShuffleComponent.LeftX, ShuffleComponent.LeftX), Fp4(4, 0, 0, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX, ShuffleComponent.RightZ, ShuffleComponent.LeftZ, ShuffleComponent.LeftX), Fp4(3, 5, 2, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightY, ShuffleComponent.RightX, ShuffleComponent.LeftY, ShuffleComponent.RightX), Fp4(4, 3, 1, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftX, ShuffleComponent.LeftZ, ShuffleComponent.RightZ, ShuffleComponent.LeftX), Fp4(0, 2, 5, 0));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftY, ShuffleComponent.RightY, ShuffleComponent.RightZ, ShuffleComponent.RightZ), Fp4(1, 4, 5, 5));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.RightX, ShuffleComponent.LeftY, ShuffleComponent.RightX), Fp4(2, 3, 1, 3));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightX, ShuffleComponent.LeftX, ShuffleComponent.LeftY, ShuffleComponent.LeftZ), Fp4(3, 0, 1, 2));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.RightZ, ShuffleComponent.RightX, ShuffleComponent.LeftX, ShuffleComponent.RightY), Fp4(5, 3, 0, 4));
            TestUtils.AreEqual(shuffle(a, b, ShuffleComponent.LeftZ, ShuffleComponent.RightZ, ShuffleComponent.LeftX, ShuffleComponent.RightY), Fp4(2, 5, 0, 4));
        }

#endif

    }
}
